;;; elfeed-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from elfeed.el

(autoload 'elfeed-update "elfeed" "\
Update all the feeds in `elfeed-feeds'." t)
(autoload 'elfeed "elfeed" "\
Enter elfeed." t)
(autoload 'elfeed-load-opml "elfeed" "\
Load feeds from an OPML file into `elfeed-feeds'.
When called interactively, the changes to `elfeed-feeds' are
saved to your customization file.

(fn FILE)" t)
(autoload 'elfeed-export-opml "elfeed" "\
Export the current feed listing to OPML-formatted FILE.

(fn FILE)" t)
(register-definition-prefixes "elfeed" '("elfeed-"))


;;; Generated autoloads from elfeed-csv.el

(register-definition-prefixes "elfeed-csv" '("elfeed-csv-"))


;;; Generated autoloads from elfeed-curl.el

(register-definition-prefixes "elfeed-curl" '("elfeed-curl-"))


;;; Generated autoloads from elfeed-db.el

(register-definition-prefixes "elfeed-db" '("elfeed-" "with-elfeed-db-visit"))


;;; Generated autoloads from elfeed-lib.el

(register-definition-prefixes "elfeed-lib" '("elfeed-"))


;;; Generated autoloads from elfeed-link.el

(autoload 'elfeed-link-store-link "elfeed-link" "\
Store a link to an elfeed search or entry buffer.

When storing a link to an entry, automatically extract all the
entry metadata. These can be used in the capture templates as
`%:keyword` expansion.

List of available keywords, when store from an Elfeed search:
- `type`        : Type of Org-mode link
- `link`        : Org-mode link to this search, also available
                  with %a, %A, %l and %L
- `description` : The search filter


List of available keywords, when store from an Elfeed entry:
- `type`                    : Type of Org-mode link
- `link`                    : Org-mode link to this entry, also available
                              with %a, %A, %l and %L
- `title`                   : Feed entry title
- `description`             : Feed entry description, same as title
- `external-link`           : Feed entry external link
- `date`                    : Date time of the feed entry publication, in
                              full ISO 8601 format
- `date-timestamp`          : Date time of the feed entry publication, in
                              Org-mode active timestamp format
- `date-inactive-timestamp` : Date time of the feed entry publication, in
                              Org-mode inactive timestamp format
- `authors`                 : List of feed entry authors names, joint by a
                              comma
- `tags`                    : List of feed entry tags, in Org-mode tags
                              format
- `content`                 : Content of the feed entry
- `feed-title`              : Title of the feed
- `feed-external-link`      : Feed external link
- `feed-authors`            : List of feed authors names, joint by a comma

If `content` type is HTML, it is automatically embedded into an
Org-mode HTML quote.")
(autoload 'elfeed-link-open "elfeed-link" "\
Jump to an elfeed entry or search.

Depending on what FILTER-OR-ID looks like, we jump to either
search buffer or show a concrete entry.

(fn FILTER-OR-ID)")
(eval-after-load 'org `(funcall ',(lambda nil (if (version< (org-version) "9.0") (with-no-warnings (org-add-link-type "elfeed" #'elfeed-link-open) (add-hook 'org-store-link-functions #'elfeed-link-store-link)) (with-no-warnings (org-link-set-parameters "elfeed" :follow #'elfeed-link-open :store #'elfeed-link-store-link))))))


;;; Generated autoloads from elfeed-log.el

(register-definition-prefixes "elfeed-log" '("elfeed-log"))


;;; Generated autoloads from elfeed-search.el

(autoload 'elfeed-search-bookmark-handler "elfeed-search" "\
Jump to an elfeed-search bookmarked location.

(fn RECORD)")
(autoload 'elfeed-search-desktop-restore "elfeed-search" "\
Restore the state of an elfeed-search buffer on desktop restore.

(fn FILE-NAME BUFFER-NAME SEARCH-FILTER)")
(add-to-list 'desktop-buffer-mode-handlers '(elfeed-search-mode . elfeed-search-desktop-restore))
(register-definition-prefixes "elfeed-search" '("elfeed-s"))


;;; Generated autoloads from elfeed-show.el

(autoload 'elfeed-show-bookmark-handler "elfeed-show" "\
Show the bookmarked entry saved in the `RECORD'.

(fn RECORD)")
(register-definition-prefixes "elfeed-show" '("elfeed-"))


;;; Generated autoloads from xml-query.el

(register-definition-prefixes "xml-query" '("xml-query"))

;;; End of scraped data

(provide 'elfeed-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; elfeed-autoloads.el ends here
