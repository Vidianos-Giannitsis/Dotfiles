;;; lispy-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from elpa.el

(register-definition-prefixes "elpa" '("straight-reload-all"))


;;; Generated autoloads from le-clojure.el

(register-definition-prefixes "le-clojure" '("lispy-"))


;;; Generated autoloads from le-hy.el

(register-definition-prefixes "le-hy" '("lispy--"))


;;; Generated autoloads from le-js.el

(register-definition-prefixes "le-js" '("lispy--"))


;;; Generated autoloads from le-julia.el

(register-definition-prefixes "le-julia" '("lispy-"))


;;; Generated autoloads from le-lisp.el

(register-definition-prefixes "le-lisp" '("lispy-"))


;;; Generated autoloads from le-python.el

(register-definition-prefixes "le-python" '("lispy-" "python-shell--interpreter"))


;;; Generated autoloads from le-racket.el

(register-definition-prefixes "le-racket" '("lispy-"))


;;; Generated autoloads from le-scheme.el

(register-definition-prefixes "le-scheme" '("lispy-"))


;;; Generated autoloads from lispy.el

(autoload 'lispy-mode "lispy" "\
Minor mode for navigating and editing LISP dialects.

When `lispy-mode' is on, most unprefixed keys,
i.e. [a-zA-Z+-./<>], conditionally call commands instead of
self-inserting. The condition (called special further on) is one
of:

- the point is before \"(\"
- the point is after \")\"
- the region is active

For instance, when special, \"j\" moves down one sexp, otherwise
it inserts itself.

When special, [0-9] call `digit-argument'.

When `lispy-mode' is on, \"[\" and \"]\" move forward and
backward through lists, which is useful to move into special.

\\{lispy-mode-map}

This is a minor mode.  If called interactively, toggle the `Lispy
mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `lispy-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lispy" '("ac-trigger-commands" "eval-error" "hydra-lispy-x" "lh-knight" "lispy-" "mc/cmds-to-run-" "unsupported-mode-error"))


;;; Generated autoloads from lispy-inline.el

(register-definition-prefixes "lispy-inline" '("lispy-"))


;;; Generated autoloads from lispy-occur.el

(autoload 'lispy-occur "lispy-occur" "\
Select a line within current top level sexp.
See `lispy-occur-backend' for the selection back end." t)
(register-definition-prefixes "lispy-occur" '("lispy-"))


;;; Generated autoloads from lispy-tags.el

(register-definition-prefixes "lispy-tags" '("lispy-" "no-semantic-support"))

;;; End of scraped data

(provide 'lispy-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; lispy-autoloads.el ends here
