;;; clojure-essential-ref.el --- Cider-doc to "Clojure, The Essential Reference" -*- lexical-binding: t; -*-

;; Copyright (C) 2020 Jordan Besly
;;
;; Version: 0.1.0
;; Package-Version: 20200619.1653
;; Package-Commit: 13ac560c25f7355fba00d9ca8c9f4ca03e7fd189
;; URL: https://github.com/p3r7/clojure-essential-ref
;; Package-Requires: ((emacs "24")(cider "0.24.0"))
;;
;; SPDX-License-Identifier: MIT

;;; Commentary:
;;
;; Provides command `clojure-essential-ref' to browse the documentation for
;; symbol in book "Clojure, The Essential Reference".
;;
;; Works similarly to `cider-clojuredocs-web'.
;;
;; By default, browse online in a web browser ("liveBook" version) as if
;; calling explicit command `clojure-essential-ref-web'.
;;
;; Using sibling package `clojure-essential-ref-nov' one could browse
;; offline to the ebook version (command `clojure-essential-ref-nov').

;;; Code:



;; REQUIRES

(require 'nrepl-dict)
(require 'cider-common)
(require 'cider-connection)
(require 'cider-client)



;; CONFIG

(defvar clojure-essential-ref-default-browse-fn #'clojure-essential-ref-browse-web)

(defvar clojure-essential-ref--base-url "https://livebook.manning.com/book/clojure-the-essential-reference"
  "Base URL for the \"livebook\" version of the book.")

(defvar clojure-essential-ref--build-url-fn #'clojure-essential-ref--build-url-from-section-id)



;; BOOK INDEX

(defvar clojure-essential-ref--index
  '(
    ;; fn creation & manipulation
    ("defn" . (:url "/chapter-2/v-29/10" :section "2.1.1"))
    ("defn-" . (:url "/chapter-2/v-29/10" :section "2.1.1"))
    ("fn" . (:url "/chapter-2/v-29/77" :section "2.1.2"))
    ("fn*" . (:url "/chapter-2/v-29/116" :section "2.1.3"))
    ("fnil" . (:url "/chapter-2/v-29/153" :section "2.2.1"))
    ("comp" . (:url "/chapter-2/v-29/179" :section "2.2.2"))
    ("complement" . (:url "/chapter-2/v-29/210" :section "2.2.3"))
    ("constantly" . (:url "/chapter-2/v-29/234" :section "2.2.4"))
    ("identity" . (:url "/chapter-2/v-29/257" :section "2.2.5"))
    ("juxt" . (:url "/chapter-2/v-29/284" :section "2.2.6"))
    ("memfn" . (:url "/chapter-2/v-29/321" :section "2.2.7"))
    ("partial" . (:url "/chapter-2/v-29/358" :section "2.2.8"))
    ("pred" . (:url "/chapter-2/v-29/393" :section "2.2.9"))
    ("every" . (:url "/chapter-2/v-29/393" :section "2.2.9"))
    ("fn" . (:url "/chapter-2/v-29/393" :section "2.2.9"))
    ("some" . (:url "/chapter-2/v-29/393" :section "2.2.9"))
    ("->" . (:url "/chapter-2/v-29/451" :section "2.3.1"))
    ("->>" . (:url "/chapter-2/v-29/504" :section "2.3.2"))
    ("cond->" . (:url "/chapter-2/v-29/531" :section "2.3.3"))
    ("cond->>" . (:url "/chapter-2/v-29/531" :section "2.3.3"))
    ("some->" . (:url "/chapter-2/v-29/565" :section "2.3.4"))
    ("some->>" . (:url "/chapter-2/v-29/567" :section "2.3.5"))
    ("as->" . (:url "/chapter-2/v-29/596" :section "2.3.6"))
    ("apply" . (:url "/chapter-2/v-29/629" :section "2.4.1"))
    ("memoize" . (:url "/chapter-2/v-29/668" :section "2.4.2"))
    ("trampoline" . (:url "/chapter-2/v-29/709" :section "2.4.3"))

    ;; basic constructs
    ("let" . (:url "/chapter-3/v-29/15" :section "3.1.1"))
    ("let*" . (:url "/chapter-3/v-29/15" :section "3.1.1"))
    ("if-let" . (:url "/chapter-3/v-29/55" :section "3.1.2"))
    ("when-let" . (:url "/chapter-3/v-29/55" :section "3.1.2"))
    ("if-some" . (:url "/chapter-3/v-29/55" :section "3.1.2"))
    ("when-some" . (:url "/chapter-3/v-29/55" :section "3.1.2"))
    ("letfn" . (:url "/chapter-3/v-29/105" :section "3.1.3"))
    ("letfn*" . (:url "/chapter-3/v-29/105" :section "3.1.3"))
    ("not" . (:url "/chapter-3/v-29/159" :section "3.2.1"))
    ("and" . (:url "/chapter-3/v-29/185" :section "3.2.2"))
    ("or" . (:url "/chapter-3/v-29/185" :section "3.2.2"))
    ("bit-and" . (:url "/chapter-3/v-29/228" :section "3.2.3"))
    ("bit-or" . (:url "/chapter-3/v-29/228" :section "3.2.3"))
    ("if" . (:url "/chapter-3/v-29/303" :section "3.3.1"))
    ("if-not" . (:url "/chapter-3/v-29/303" :section "3.3.1"))
    ("when" . (:url "/chapter-3/v-29/303" :section "3.3.1"))
    ("when-not" . (:url "/chapter-3/v-29/303" :section "3.3.1"))
    ("cond" . (:url "/chapter-3/v-29/346" :section "3.3.2"))
    ("condp" . (:url "/chapter-3/v-29/389" :section "3.3.3"))
    ("case" . (:url "/chapter-3/v-29/438" :section "3.3.4"))
    ("loop" . (:url "/chapter-3/v-29/527" :section "3.4.1"))
    ("recur" . (:url "/chapter-3/v-29/527" :section "3.4.1"))
    ("loop*" . (:url "/chapter-3/v-29/527" :section "3.4.1"))
    ("range" . (:url "/chapter-3/v-29/594" :section "3.4.2"))
    ("for" . (:url "/chapter-3/v-29/644" :section "3.4.3"))
    ("while" . (:url "/chapter-3/v-29/691" :section "3.4.4"))
    ("dotimes" . (:url "/chapter-3/v-29/728" :section "3.4.5"))
    ("first" . (:url "/chapter-3/v-29/785" :section "3.5.1"))
    ("second" . (:url "/chapter-3/v-29/785" :section "3.5.1"))
    ("last" . (:url "/chapter-3/v-29/785" :section "3.5.1"))
    ("map" . (:url "/chapter-3/v-29/849" :section "3.5.2"))
    ("map-indexed" . (:url "/chapter-3/v-29/849" :section "3.5.2"))
    ("filter" . (:url "/chapter-3/v-29/908" :section "3.5.3"))
    ("remove" . (:url "/chapter-3/v-29/908" :section "3.5.3"))
    ("reduce" . (:url "/chapter-3/v-29/941" :section "3.5.4"))
    ("reductions" . (:url "/chapter-3/v-29/941" :section "3.5.4"))
    ("reductions" . (:url "/chapter-4/v-29/17" :section "4.1"))
    ("&form" . (:url "/chapter-4/v-29/58" :section "4.1.2")) ; NB: implicit arg
    ("&env" . (:url "/chapter-4/v-29/66" :section "4.1.3")) ; NB: implicit arg
    ("macroexpand" . (:url "/chapter-4/v-29/103" :section "4.2"))
    ("macroexpand-1" . (:url "/chapter-4/v-29/103" :section "4.2"))
    ("clojure.walk/macroexpand-all" . (:url "/chapter-4/v-29/103" :section "4.2"))
    ("quote" . (:url "/chapter-4/v-29/131" :section "4.3"))
    ("gensym" . (:url "/chapter-4/v-29/156" :section "4.4"))
    ("definline" . (:url "/chapter-4/v-29/183" :section "4.5"))
    ("destructure" . (:url "/chapter-4/v-29/231" :section "4.6"))
    ("clojure.template/apply-template" . (:url "/chapter-4/v-29/272" :section "4.7"))
    ("clojure.template/do-template" . (:url "/chapter-4/v-29/301" :section "4.8"))

    ;; operations on numbers
    ("+" . (:url "/chapter-5/v-29/19" :section "5.1"))
    ("-" . (:url "/chapter-5/v-29/19" :section "5.1"))
    ("*" . (:url "/chapter-5/v-29/19" :section "5.1"))
    ("/" . (:url "/chapter-5/v-29/19" :section "5.1"))
    ("inc" . (:url "/chapter-5/v-29/95" :section "5.2"))
    ("dec" . (:url "/chapter-5/v-29/95" :section "5.2"))
    ("quot" . (:url "/chapter-5/v-29/133" :section "5.3"))
    ("rem" . (:url "/chapter-5/v-29/133" :section "5.3"))
    ("mod" . (:url "/chapter-5/v-29/133" :section "5.3"))
    ("max" . (:url "/chapter-5/v-29/168" :section "5.4"))
    ("min" . (:url "/chapter-5/v-29/168" :section "5.4"))
    ("max-key" . (:url "/chapter-5/v-29/199" :section "5.5"))
    ("min-key" . (:url "/chapter-5/v-29/199" :section "5.5"))
    ("rand" . (:url "/chapter-5/v-29/231" :section "5.6"))
    ("rand-int" . (:url "/chapter-5/v-29/231" :section "5.6"))
    ("with-precision" . (:url "/chapter-5/v-29/264" :section "5.7"))
    ("+'" . (:url "/chapter-5/v-29/286" :section "5.8"))
    ("-'" . (:url "/chapter-5/v-29/286" :section "5.8"))
    ("*'" . (:url "/chapter-5/v-29/286" :section "5.8"))
    ("inc'" . (:url "/chapter-5/v-29/286" :section "5.8"))
    ("dec'" . (:url "/chapter-5/v-29/286" :section "5.8"))
    ("unchecked-add" . (:url "/chapter-5/v-29/311" :section "5.9"))
    ("unchecked-add-int" . (:url "/chapter-5/v-29/346" :section "5.10"))

    ;; comparison & equality
    ("=" . (:url "/chapter-6/v-29/15" :section "6.1"))
    ("not=" . (:url "/chapter-6/v-29/15" :section "6.1"))
    ("==" . (:url "/chapter-6/v-29/81" :section "6.2"))
    ("<" . (:url "/chapter-6/v-29/118" :section "6.3"))
    (">" . (:url "/chapter-6/v-29/118" :section "6.3"))
    ("<=" . (:url "/chapter-6/v-29/118" :section "6.3"))
    (">=" . (:url "/chapter-6/v-29/118" :section "6.3"))
    ("compare" . (:url "/chapter-6/v-29/162" :section "6.4"))
    ("identical?" . (:url "/chapter-6/v-29/227" :section "6.5"))
    ("hash" . (:url "/chapter-6/v-29/270" :section "6.6"))
    ("clojure.data/diff" . (:url "/chapter-6/v-29/310" :section "6.7"))

    ;; reducers & transducers
    ("clojure.core.reducers/fold" . (:url "/chapter-7/v-29/22" :section "7.1.1"))
    ("clojure.core.reducers/reducer" . (:url "/chapter-7/v-29/70" :section "7.1.2"))
    ("clojure.core.reducers/folder" . (:url "/chapter-7/v-29/70" :section "7.1.2"))
    ("clojure.core.reducers/map" . (:url "/chapter-7/v-29/70" :section "7.1.2"))
    ("clojure.core.reducers/mapcat" . (:url "/chapter-7/v-29/70" :section "7.1.2"))
    ("clojure.core.reducers/filter" . (:url "/chapter-7/v-29/70" :section "7.1.2"))
    ("clojure.core.reducers/remove" . (:url "/chapter-7/v-29/70" :section "7.1.2"))
    ("clojure.core.reducers/flatten" . (:url "/chapter-7/v-29/70" :section "7.1.2"))
    ("clojure.core.reducers/take-while" . (:url "/chapter-7/v-29/70" :section "7.1.2"))
    ("clojure.core.reducers/take" . (:url "/chapter-7/v-29/70" :section "7.1.2"))
    ("clojure.core.reducers/drop" . (:url "/chapter-7/v-29/70" :section "7.1.2"))
    ("clojure.core.reducers/monoid" . (:url "/chapter-7/v-29/115" :section "7.1.3"))
    ("clojure.core.reducers/foldcat" . (:url "/chapter-7/v-29/149" :section "7.1.4"))
    ("clojure.core.reducers/cat" . (:url "/chapter-7/v-29/149" :section "7.1.4"))
    ("clojure.core.reducers/append!" . (:url "/chapter-7/v-29/149" :section "7.1.4"))
    ("transduce" . (:url "/chapter-7/v-29/229" :section "7.2.1"))
    ("eduction" . (:url "/chapter-7/v-29/269" :section "7.2.2"))
    ("completing" . (:url "/chapter-7/v-29/314" :section "7.2.3"))
    ("cat" . (:url "/chapter-7/v-29/355" :section "7.2.4"))
    ("reduced" . (:url "/chapter-7/v-29/386" :section "7.3"))
    ("reduced?" . (:url "/chapter-7/v-29/386" :section "7.3"))
    ("ensure-reduced" . (:url "/chapter-7/v-29/386" :section "7.3"))
    ("unreduced" . (:url "/chapter-7/v-29/386" :section "7.3"))

    ;; collections
    ("into" . (:url "/chapter-8/v-29/8" :section "8.1.1"))
    ("count" . (:url "/chapter-8/v-29/47" :section "8.1.2"))
    ("nth" . (:url "/chapter-8/v-29/88" :section "8.1.3"))
    ("empty" . (:url "/chapter-8/v-29/132" :section "8.1.4"))
    ("every?" . (:url "/chapter-8/v-29/164" :section "8.1.5"))
    ("not-every?" . (:url "/chapter-8/v-29/164" :section "8.1.5"))
    ("some" . (:url "/chapter-8/v-29/164" :section "8.1.5"))
    ("not-any?" . (:url "/chapter-8/v-29/164" :section "8.1.5"))
    ("empty?" . (:url "/chapter-8/v-29/215" :section "8.1.6"))
    ("not-empty" . (:url "/chapter-8/v-29/215" :section "8.1.6"))
    ("conj" . (:url "/chapter-8/v-29/262" :section "8.2.1"))
    ("get" . (:url "/chapter-8/v-29/301" :section "8.2.2"))
    ("contains?" . (:url "/chapter-8/v-29/384" :section "8.2.3"))
    ("rand-nth" . (:url "/chapter-8/v-29/445" :section "8.3.1"))
    ("shuffle" . (:url "/chapter-8/v-29/480" :section "8.3.2"))
    ("random-sample" . (:url "/chapter-8/v-29/511" :section "8.3.3"))
    ("frequencies" . (:url "/chapter-8/v-29/547" :section "8.3.4"))
    ("sort-by" . (:url "/chapter-8/v-29/578" :section "8.3.5" sort and))
    ("group-by" . (:url "/chapter-8/v-29/629" :section "8.3.6"))
    ("replace" . (:url "/chapter-8/v-29/659" :section "8.3.7"))
    ("reverse" . (:url "/chapter-8/v-29/695" :section "8.3.8"))
    ("walk" . (:url "/chapter-8/v-29/746" :section "8.4.1"))
    ("prewalk-demo" . (:url "/chapter-8/v-29/746" :section "8.4.1"))
    ("postwalk-demo" . (:url "/chapter-8/v-29/746" :section "8.4.1"))
    ("prewalk" . (:url "/chapter-8/v-29/763" :section "8.4.2"))
    ("postwalk" . (:url "/chapter-8/v-29/763" :section "8.4.2"))
    ("prewalk-replace" . (:url "/chapter-8/v-29/795" :section "8.4.3"))
    ("postwalk-replace" . (:url "/chapter-8/v-29/795" :section "8.4.3"))
    ("clojure.zip/zipper" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/seq-zip" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/xml-zip" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/vector-zip" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/make-node" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/node" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/up" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/down" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/right" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/left" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/children" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/lefts" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/rights" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/branch?" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/path" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/replace" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/edit" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/insert-left" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/insert-right" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/append-child" . (:url "/chapter-8/v-29/805" :section "8.4.4"))
    ("clojure.zip/next" . (:url "/chapter-8/v-29/805" :section "8.4.4"))

    ;; sequences
    ("seq" . (:url "/chapter-9/v-29/23" :section "9.1.1"))
    ("sequence" . (:url "/chapter-9/v-29/23" :section "9.1.1"))
    ("rseq" . (:url "/chapter-9/v-29/77" :section "9.1.2"))
    ("subseq" . (:url "/chapter-9/v-29/112" :section "9.1.3"))
    ("rsubseq" . (:url "/chapter-9/v-29/112" :section "9.1.3"))
    ("seque" . (:url "/chapter-9/v-29/150" :section "9.1.4"))
    ("pmap" . (:url "/chapter-9/v-29/200" :section "9.1.5"))
    ("pcalls" . (:url "/chapter-9/v-29/200" :section "9.1.5"))
    ("pvalues" . (:url "/chapter-9/v-29/200" :section "9.1.5"))
    ("repeatedly" . (:url "/chapter-9/v-29/276" :section "9.2.1"))
    ("iterate" . (:url "/chapter-9/v-29/312" :section "9.2.2"))
    ("repeat" . (:url "/chapter-9/v-29/348" :section "9.2.3"))
    ("cycle" . (:url "/chapter-9/v-29/348" :section "9.2.3"))
    ("lazy-seq" . (:url "/chapter-9/v-29/395" :section "9.3.1"))
    ("tree-seq" . (:url "/chapter-9/v-29/449" :section "9.3.2"))
    ("file-seq" . (:url "/chapter-9/v-29/487" :section "9.3.3"))
    ("xml-seq" . (:url "/chapter-9/v-29/512" :section "9.3.4"))
    ("re-seq" . (:url "/chapter-9/v-29/535" :section "9.3.5"))
    ("line-seq" . (:url "/chapter-9/v-29/571" :section "9.3.6"))
    ("resultset-seq" . (:url "/chapter-9/v-29/599" :section "9.3.7"))
    ("iterator-seq" . (:url "/chapter-9/v-29/629" :section "9.3.8"))
    ("enumeration-seq" . (:url "/chapter-9/v-29/629" :section "9.3.8"))
    ("concat" . (:url "/chapter-9/v-29/659" :section "9.3.9"))
    ("lazy-cat" . (:url "/chapter-9/v-29/659" :section "9.3.9"))
    ("list" . (:url "/chapter-9/v-29/714" :section "9.4.1"))
    ("cons" . (:url "/chapter-9/v-29/765" :section "9.4.2"))
    ("list*" . (:url "/chapter-9/v-29/765" :section "9.4.2"))

    ;; sequential processing
    ("rest" . (:url "/chapter-10/v-29/13" :section "10.1"))
    ("next" . (:url "/chapter-10/v-29/13" :section "10.1"))
    ("fnext" . (:url "/chapter-10/v-29/13" :section "10.1"))
    ("nnext" . (:url "/chapter-10/v-29/13" :section "10.1"))
    ("ffirst" . (:url "/chapter-10/v-29/13" :section "10.1"))
    ("nfirst" . (:url "/chapter-10/v-29/13" :section "10.1"))
    ("butlast" . (:url "/chapter-10/v-29/13" :section "10.1"))
    ("nthnext" . (:url "/chapter-10/v-29/62" :section "10.2"))
    ("drop" . (:url "/chapter-10/v-29/62" :section "10.2"))
    ("drop-while" . (:url "/chapter-10/v-29/62" :section "10.2"))
    ("drop-last" . (:url "/chapter-10/v-29/62" :section "10.2"))
    ("take" . (:url "/chapter-10/v-29/62" :section "10.2"))
    ("take-while" . (:url "/chapter-10/v-29/62" :section "10.2"))
    ("take-last" . (:url "/chapter-10/v-29/62" :section "10.2"))
    ("nthrest" . (:url "/chapter-10/v-29/62" :section "10.2"))
    ("nthnext" . (:url "/chapter-10/v-29/62" :section "10.2"))
    ("keep" . (:url "/chapter-10/v-29/121" :section "10.3"))
    ("keep-indexed" . (:url "/chapter-10/v-29/121" :section "10.3"))
    ("mapcat" . (:url "/chapter-10/v-29/158" :section "10.4"))
    ("interpose" . (:url "/chapter-10/v-29/198" :section "10.5"))
    ("interleave" . (:url "/chapter-10/v-29/198" :section "10.5"))
    ("partition" . (:url "/chapter-10/v-29/244" :section "10.6"))
    ("partition-all" . (:url "/chapter-10/v-29/244" :section "10.6"))
    ("partition-by" . (:url "/chapter-10/v-29/244" :section "10.6"))
    ("flatten" . (:url "/chapter-10/v-29/297" :section "10.7"))
    ("distinct" . (:url "/chapter-10/v-29/327" :section "10.8"))
    ("dedupe" . (:url "/chapter-10/v-29/327" :section "10.8"))
    ("distinct?" . (:url "/chapter-10/v-29/327" :section "10.8"))
    ("take-nth" . (:url "/chapter-10/v-29/382" :section "10.9"))
    ("split-at" . (:url "/chapter-10/v-29/435" :section "10.10"))
    ("split-with" . (:url "/chapter-10/v-29/435" :section "10.10"))
    ("when-first" . (:url "/chapter-10/v-29/469" :section "10.11"))
    ("chunk-cons" . (:url "/chapter-10/v-29/496" :section "10.12"))
    ("chunk-first" . (:url "/chapter-10/v-29/496" :section "10.12"))
    ("chunk-rest" . (:url "/chapter-10/v-29/496" :section "10.12"))
    ("chunk-next" . (:url "/chapter-10/v-29/496" :section "10.12"))
    ("chunk-buffer" . (:url "/chapter-10/v-29/496" :section "10.12"))
    ("chunk-append" . (:url "/chapter-10/v-29/496" :section "10.12"))
    ("chunk" . (:url "/chapter-10/v-29/496" :section "10.12"))

    ;; maps
    ("hash-map" . (:url "/chapter-11/v-29/21" :section "11.1.1"))
    ("array-map" . (:url "/chapter-11/v-29/49" :section "11.1.2"))
    ("sorted-map" . (:url "/chapter-11/v-29/86" :section "11.1.3"))
    ("sorted-map-by" . (:url "/chapter-11/v-29/86" :section "11.1.3"))
    ("create-struct" . (:url "/chapter-11/v-29/142" :section "11.1.4"))
    ("defstruct" . (:url "/chapter-11/v-29/142" :section "11.1.4"))
    ("struct-map" . (:url "/chapter-11/v-29/142" :section "11.1.4"))
    ("struct" . (:url "/chapter-11/v-29/142" :section "11.1.4"))
    ("accessor" . (:url "/chapter-11/v-29/142" :section "11.1.4"))
    ("zipmap" . (:url "/chapter-11/v-29/195" :section "11.1.5"))
    ("keys" . (:url "/chapter-11/v-29/236" :section "11.2.1"))
    ("vals" . (:url "/chapter-11/v-29/236" :section "11.2.1"))
    ("find" . (:url "/chapter-11/v-29/264" :section "11.2.2"))
    ("key" . (:url "/chapter-11/v-29/264" :section "11.2.2"))
    ("val" . (:url "/chapter-11/v-29/264" :section "11.2.2"))
    ("select-keys" . (:url "/chapter-11/v-29/304" :section "11.2.4"))
    ("get-in" . (:url "/chapter-11/v-29/304" :section "11.2.4"))
    ("assoc" . (:url "/chapter-11/v-29/349" :section "11.3.1"))
    ("assoc-in" . (:url "/chapter-11/v-29/349" :section "11.3.1"))
    ("dissoc" . (:url "/chapter-11/v-29/349" :section "11.3.1"))
    ("update" . (:url "/chapter-11/v-29/407" :section "11.3.2"))
    ("update-in" . (:url "/chapter-11/v-29/407" :section "11.3.2"))
    ("merge" . (:url "/chapter-11/v-29/440" :section "11.3.3"))
    ("merge-with" . (:url "/chapter-11/v-29/440" :section "11.3.3"))
    ("reduce-kv" . (:url "/chapter-11/v-29/490" :section "11.3.4"))
    ("clojure.walk/keywordize-keys" . (:url "/chapter-11/v-29/536" :section "11.4.1"))
    ("clojure.walk/stringify-keys" . (:url "/chapter-11/v-29/536" :section "11.4.1"))
    ("clojure.set/rename-keys" . (:url "/chapter-11/v-29/545" :section "11.4.2"))
    ("clojure.set/map-invert" . (:url "/chapter-11/v-29/554" :section "11.4.3"))

    ;; vectors
    ("vector" . (:url "/chapter-12/v-29/34" :section "12.1"))
    ("vec" . (:url "/chapter-12/v-29/103" :section "12.2"))
    ("peek" . (:url "/chapter-12/v-29/153" :section "12.3"))
    ("pop" . (:url "/chapter-12/v-29/153" :section "12.3"))
    ("vector-of" . (:url "/chapter-12/v-29/189" :section "12.4"))
    ("mapv" . (:url "/chapter-12/v-29/238" :section "12.5"))
    ("filterv" . (:url "/chapter-12/v-29/286" :section "12.6"))
    ("subvec" . (:url "/chapter-12/v-29/318" :section "12.7"))

    ;; sets
    ("hash-set" . (:url "/chapter-13/v-29/8" :section "13.1"))
    ("set" . (:url "/chapter-13/v-29/47" :section "13.2"))
    ("sorted-set" . (:url "/chapter-13/v-29/80" :section "13.3"))
    ("sorted-set-by" . (:url "/chapter-13/v-29/80" :section "13.3"))
    ("disj" . (:url "/chapter-13/v-29/121" :section "13.4"))
    ("union" . (:url "/chapter-13/v-29/156" :section "13.5"))
    ("difference" . (:url "/chapter-13/v-29/156" :section "13.5"))
    ("intersection" . (:url "/chapter-13/v-29/156" :section "13.5"))
    ("subset?" . (:url "/chapter-13/v-29/193" :section "13.6"))
    ("superset?" . (:url "/chapter-13/v-29/193" :section "13.6"))
    ("select" . (:url "/chapter-13/v-29/198" :section "13.7"))
    ("index" . (:url "/chapter-13/v-29/198" :section "13.7"))
    ("rename" . (:url "/chapter-13/v-29/198" :section "13.7"))
    ("join" . (:url "/chapter-13/v-29/198" :section "13.7"))
    ("project" . (:url "/chapter-13/v-29/198" :section "13.7"))

    ;; concurency
    ("future" . (:url "/chapter-14/v-29/8" :section "14.1"))
    ("future-done?" . (:url "/chapter-14/v-29/13" :section "14.1.1"))
    ("future?" . (:url "/chapter-14/v-29/13" :section "14.1.1"))
    ("future-cancel" . (:url "/chapter-14/v-29/18" :section "14.1.2"))
    ("future-cancelled?" . (:url "/chapter-14/v-29/18" :section "14.1.2"))
    ("future-call" . (:url "/chapter-14/v-29/21" :section "14.1.3"))
    ("promise" . (:url "/chapter-14/v-29/35" :section "14.2"))
    ("deliver" . (:url "/chapter-14/v-29/35" :section "14.2"))
    ("delay" . (:url "/chapter-14/v-29/53" :section "14.3"))
    ("delay?" . (:url "/chapter-14/v-29/69" :section "14.3.1"))
    ("force" . (:url "/chapter-14/v-29/69" :section "14.3.1"))
    ("ref" . (:url "/chapter-14/v-29/77" :section "14.4"))
    ("alter" . (:url "/chapter-14/v-29/95" :section "14.4.1"))
    ("ref-set" . (:url "/chapter-14/v-29/95" :section "14.4.1"))
    ("commute" . (:url "/chapter-14/v-29/105" :section "14.4.2"))
    ("ensure" . (:url "/chapter-14/v-29/111" :section "14.4.3"))
    ("io!" . (:url "/chapter-14/v-29/114" :section "14.4.4"))
    ("atom" . (:url "/chapter-14/v-29/121" :section "14.5"))
    ("swap!" . (:url "/chapter-14/v-29/130" :section "14.5.1"))
    ("reset!" . (:url "/chapter-14/v-29/135" :section "14.5.2"))
    ("compare-and-set!" . (:url "/chapter-14/v-29/140" :section "14.5.3"))
    ("agent" . (:url "/chapter-14/v-29/146" :section "14.6"))
    ("deref" . (:url "/chapter-14/v-29/201" :section "14.7"))
    ("realized?" . (:url "/chapter-14/v-29/201" :section "14.7"))
    ("set-validator!" . (:url "/chapter-14/v-29/218" :section "14.8"))
    ("get-validator" . (:url "/chapter-14/v-29/218" :section "14.8"))
    ("add-watch" . (:url "/chapter-14/v-29/230" :section "14.9"))
    ("remove-watch" . (:url "/chapter-14/v-29/230" :section "14.9"))
    ("locking" . (:url "/chapter-14/v-29/237" :section "14.10"))
    ("monitor-enter" . (:url "/chapter-14/v-29/237" :section "14.10"))
    ("monitor-exit" . (:url "/chapter-14/v-29/237" :section "14.10"))

    ;; types / class / hierarchies / polymorphism
    ("symbol" . (:url "/chapter-15/v-29/17" :section "15.1"))
    ("keyword" . (:url "/chapter-15/v-29/17" :section "15.1"))
    ("name" . (:url "/chapter-15/v-29/33" :section "15.1.1"))
    ("find-keyword" . (:url "/chapter-15/v-29/38" :section "15.1.2"))
    ("type" . (:url "/chapter-15/v-29/52" :section "15.2.1"))
    ("instance?" . (:url "/chapter-15/v-29/52" :section "15.2.1"))
    ("class" . (:url "/chapter-15/v-29/52" :section "15.2.1"))
    ("instance?" . (:url "/chapter-15/v-29/62" :section "15.2.2"))
    ("gen-class" . (:url "/chapter-15/v-29/67" :section "15.3"))
    ("gen-interface" . (:url "/chapter-15/v-29/67" :section "15.3"))
    ("deftype" . (:url "/chapter-15/v-29/91" :section "15.4"))
    ("definterface" . (:url "/chapter-15/v-29/91" :section "15.4"))
    ("proxy" . (:url "/chapter-15/v-29/119" :section "15.5"))
    ("reify" . (:url "/chapter-15/v-29/139" :section "15.6"))
    ("defrecord" . (:url "/chapter-15/v-29/148" :section "15.7"))
    ("defprotocol" . (:url "/chapter-15/v-29/160" :section "15.8"))
    ("extend" . (:url "/chapter-15/v-29/179" :section "15.9"))
    ("extend-type" . (:url "/chapter-15/v-29/179" :section "15.9"))
    ("extend-protocol" . (:url "/chapter-15/v-29/179" :section "15.9"))
    ("derive" . (:url "/chapter-15/v-29/199" :section "15.10"))
    ("make-hierarchy" . (:url "/chapter-15/v-29/199" :section "15.10"))
    ("defmulti" . (:url "/chapter-15/v-29/223" :section "15.11"))
    ("defmethod" . (:url "/chapter-15/v-29/223" :section "15.11"))

    ;; vars & ns
    ("def" . (:url "/chapter-16/v-29/31" :section "16.4.1"))
    ("declare" . (:url "/chapter-16/v-29/41" :section "16.4.2"))
    ("intern" . (:url "/chapter-16/v-29/46" :section "16.4.3"))
    ("defonce" . (:url "/chapter-16/v-29/51" :section "16.4.4"))
    ("var" . (:url "/chapter-16/v-29/61" :section "16.5.1"))
    ("find-var" . (:url "/chapter-16/v-29/67" :section "16.5.2"))
    ("resolve" . (:url "/chapter-16/v-29/71" :section "16.5.3"))
    ("ns-resolve" . (:url "/chapter-16/v-29/71" :section "16.5.3"))
    ("clojure.repl/dir-fn" . (:url "/chapter-16/v-29/79" :section "16.5.4"))
    ("clojure.repl/dir" . (:url "/chapter-16/v-29/79" :section "16.5.4"))
    ("bound?" . (:url "/chapter-16/v-29/82" :section "16.5.5"))
    ("thread-bound?" . (:url "/chapter-16/v-29/82" :section "16.5.5"))
    ("alter-var-root" . (:url "/chapter-16/v-29/88" :section "16.6.1"))
    ("with-redefs" . (:url "/chapter-16/v-29/96" :section "16.6.2"))
    ("with-redefs-fn" . (:url "/chapter-16/v-29/96" :section "16.6.2"))
    ("bound-fn" . (:url "/chapter-16/v-29/111" :section "16.7.1"))
    ("with-local-vars" . (:url "/chapter-16/v-29/119" :section "16.8"))
    ("var-get" . (:url "/chapter-16/v-29/119" :section "16.8"))
    ("var-set" . (:url "/chapter-16/v-29/119" :section "16.8"))
    ("ns" . (:url "/chapter-16/v-29/124" :section "16.9"))
    ("in-ns" . (:url "/chapter-16/v-29/124" :section "16.9"))
    ("remove-ns" . (:url "/chapter-16/v-29/124" :section "16.9"))
    ("create-ns" . (:url "/chapter-16/v-29/136" :section "16.10"))
    ("alias" . (:url "/chapter-16/v-29/144" :section "16.10.1"))
    ("ns-aliases" . (:url "/chapter-16/v-29/144" :section "16.10.1"))
    ("ns-unalias" . (:url "/chapter-16/v-29/144" :section "16.10.1"))
    ("ns-unalias" . (:url "/chapter-16/v-29/153" :section "16.10.2"))
    ("ns-map" . (:url "/chapter-16/v-29/157" :section "16.11"))
    ("ns-unmap" . (:url "/chapter-16/v-29/157" :section "16.11"))
    ("ns-publics" . (:url "/chapter-16/v-29/164" :section "16.12"))
    ("ns-interns" . (:url "/chapter-16/v-29/164" :section "16.12"))
    ("ns-imports" . (:url "/chapter-16/v-29/164" :section "16.12"))
    ("refer" . (:url "/chapter-16/v-29/171" :section "16.13.1"))
    ("require" . (:url "/chapter-16/v-29/176" :section "16.13.2"))
    ("loaded-libs" . (:url "/chapter-16/v-29/179" :section "16.13.3"))
    ("use" . (:url "/chapter-16/v-29/189" :section "16.13.4"))
    ("import" . (:url "/chapter-16/v-29/193" :section "16.13.5"))
    ("find-ns" . (:url "/chapter-16/v-29/196" :section "16.14"))
    ("all-ns" . (:url "/chapter-16/v-29/196" :section "16.14"))
    ("the-ns" . (:url "/chapter-16/v-29/202" :section "16.15"))
    ("ns-name" . (:url "/chapter-16/v-29/205" :section "16.15.1"))
    ("namespace" . (:url "/chapter-16/v-29/208" :section "16.15.2"))
    ("meta" . (:url "/chapter-16/v-29/212" :section "16.16.1"))
    ("with-meta" . (:url "/chapter-16/v-29/229" :section "16.16.2"))
    ("vary-meta" . (:url "/chapter-16/v-29/232" :section "16.16.3"))
    ("alter-meta!" . (:url "/chapter-16/v-29/235" :section "16.16.4"))
    ("reset-meta!" . (:url "/chapter-16/v-29/238" :section "16.16.5"))

    ;; evaluation
    ("read" . (:url "/chapter-17/v-29/10" :section "17.1.1"))
    ("read-string" . (:url "/chapter-17/v-29/29" :section "17.1.2"))
    ("eval" . (:url "/chapter-17/v-29/35" :section "17.2"))
    ("load" . (:url "/chapter-17/v-29/46" :section "17.3.1"))
    ("load-file" . (:url "/chapter-17/v-29/52" :section "17.3.2"))
    ("load-string" . (:url "/chapter-17/v-29/55" :section "17.3.3"))
    ("load-reader" . (:url "/chapter-17/v-29/65" :section "17.3.4"))
    ("compile" . (:url "/chapter-17/v-29/67" :section "17.4"))
    ("test" . (:url "/chapter-17/v-29/80" :section "17.5"))
    ("assert" . (:url "/chapter-17/v-29/80" :section "17.5"))
    ("clojure.edn/read" . (:url "/chapter-17/v-29/89" :section "17.6"))
    ("clojure.edn/read-string" . (:url "/chapter-17/v-29/89" :section "17.6"))
    ("tagged-literal" . (:url "/chapter-17/v-29/100" :section "17.7"))
    ("tagged-literal?" . (:url "/chapter-17/v-29/100" :section "17.7"))
    ("default-data-readers" . (:url "/chapter-17/v-29/108" :section "17.8"))
    ("reader-conditional?" . (:url "/chapter-17/v-29/115" :section "17.9"))
    ("reader-conditional" . (:url "/chapter-17/v-29/115" :section "17.9"))

    ;; formatting & printing
    ("format" . (:url "/chapter-18/v-29/3" :section "18.1"))
    ("printf" . (:url "/chapter-18/v-29/3" :section "18.1"))
    ("cl-format" . (:url "/chapter-18/v-29/3" :section "18.1"))
    ("pr" . (:url "/chapter-18/v-29/23" :section "18.2"))
    ("prn" . (:url "/chapter-18/v-29/23" :section "18.2"))
    ("pr-str" . (:url "/chapter-18/v-29/23" :section "18.2"))
    ("prn-str" . (:url "/chapter-18/v-29/23" :section "18.2"))
    ("print" . (:url "/chapter-18/v-29/23" :section "18.2"))
    ("println" . (:url "/chapter-18/v-29/23" :section "18.2"))
    ("print-str" . (:url "/chapter-18/v-29/23" :section "18.2"))
    ("println-str" . (:url "/chapter-18/v-29/23" :section "18.2"))
    ("clojure.pprint/pprint" . (:url "/chapter-18/v-29/34" :section "18.3"))
    ("clojure.pprint/pp" . (:url "/chapter-18/v-29/34" :section "18.3"))
    ("write" . (:url "/chapter-18/v-29/34" :section "18.3"))
    ("print-table" . (:url "/chapter-18/v-29/34" :section "18.3"))
    ("print-method" . (:url "/chapter-18/v-29/52" :section "18.4"))
    ("print-dup" . (:url "/chapter-18/v-29/52" :section "18.4"))
    ("print-ctor" . (:url "/chapter-18/v-29/52" :section "18.4"))
    ("slurp" . (:url "/chapter-18/v-29/69" :section "18.5"))
    ("spit" . (:url "/chapter-18/v-29/69" :section "18.5"))

    ;; strings & regexps
    ("str" . (:url "/chapter-19/v-29/3" :section "19.1"))
    ("clojure.string/join" . (:url "/chapter-19/v-29/12" :section "19.2"))
    ("clojure.string/replace" . (:url "/chapter-19/v-29/19" :section "19.3"))
    ("clojure.string/replace-first" . (:url "/chapter-19/v-29/19" :section "19.3"))
    ("clojure.string/re-quote-replacement" . (:url "/chapter-19/v-29/19" :section "19.3"))
    ("clojure.string/subs" . (:url "/chapter-19/v-29/35" :section "19.4"))
    ("clojure.string/split" . (:url "/chapter-19/v-29/35" :section "19.4"))
    ("clojure.string/split-lines" . (:url "/chapter-19/v-29/35" :section "19.4"))
    ("clojure.string/trim" . (:url "/chapter-19/v-29/46" :section "19.5"))
    ("clojure.string/triml" . (:url "/chapter-19/v-29/46" :section "19.5"))
    ("clojure.string/trimr" . (:url "/chapter-19/v-29/46" :section "19.5"))
    ("clojure.string/trim-newline" . (:url "/chapter-19/v-29/46" :section "19.5"))
    ("clojure.string/escape" . (:url "/chapter-19/v-29/58" :section "19.6"))
    ("clojure.string/char-name-string" . (:url "/chapter-19/v-29/58" :section "19.6"))
    ("clojure.string/char-escape-string" . (:url "/chapter-19/v-29/58" :section "19.6"))
    ("clojure.string/lower-case" . (:url "/chapter-19/v-29/65" :section "19.7"))
    ("clojure.string/upper-case" . (:url "/chapter-19/v-29/65" :section "19.7"))
    ("clojure.string/capitalize" . (:url "/chapter-19/v-29/65" :section "19.7"))
    ("clojure.string/index-of" . (:url "/chapter-19/v-29/74" :section "19.8"))
    ("clojure.string/last-index-of" . (:url "/chapter-19/v-29/74" :section "19.8"))
    ("clojure.string/blank?" . (:url "/chapter-19/v-29/83" :section "19.9"))
    ("clojure.string/ends-with?" . (:url "/chapter-19/v-29/83" :section "19.9"))
    ("clojure.string/starts-with?" . (:url "/chapter-19/v-29/83" :section "19.9"))
    ("clojure.string/includes?" . (:url "/chapter-19/v-29/83" :section "19.9"))
    ("clojure.string/re-pattern" . (:url "/chapter-19/v-29/91" :section "19.10"))
    ("re-matcher" . (:url "/chapter-19/v-29/91" :section "19.10"))
    ("re-groups" . (:url "/chapter-19/v-29/91" :section "19.10"))
    ("re-seq" . (:url "/chapter-19/v-29/91" :section "19.10"))
    ("re-matches" . (:url "/chapter-19/v-29/91" :section "19.10"))
    ("re-find" . (:url "/chapter-19/v-29/91" :section "19.10"))

    ;; mutation & side-effects
    ("transient" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("persistent!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("conj!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("pop!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("assoc!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("dissoc!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("disj!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("persistent!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("conj!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("pop!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("assoc!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("dissoc!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("disj!" . (:url "/chapter-20/v-29/3" :section "20.1" and))
    ("persistent!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("conj!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("pop!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("assoc!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("dissoc!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("disj!" . (:url "/chapter-20/v-29/3" :section "20.1"))
    ("doseq" . (:url "/chapter-20/v-29/20" :section "20.2"))
    ("dorun" . (:url "/chapter-20/v-29/20" :section "20.2"))
    ("run!" . (:url "/chapter-20/v-29/20" :section "20.2"))
    ("doall" . (:url "/chapter-20/v-29/20" :section "20.2"))
    ("do" . (:url "/chapter-20/v-29/20" :section "20.2"))
    ("volatile!" . (:url "/chapter-20/v-29/32" :section "20.3"))
    ("vreset!" . (:url "/chapter-20/v-29/32" :section "20.3"))
    ("vswap!" . (:url "/chapter-20/v-29/32" :section "20.3"))
    ("volatile?" . (:url "/chapter-20/v-29/32" :section "20.3"))
    ("set!" . (:url "/chapter-20/v-29/48" :section "20.4"))

    ;; java(script) interop
    ("." . (:url "/chapter-21/v-29/9" :section "21.1"))
    (".." . (:url "/chapter-21/v-29/9" :section "21.1"))
    ("doto" . (:url "/chapter-21/v-29/9" :section "21.1"))
    ("new" . (:url "/chapter-21/v-29/18" :section "21.2"))
    ("try" . (:url "/chapter-21/v-29/27" :section "21.3"))
    ("catch" . (:url "/chapter-21/v-29/27" :section "21.3"))
    ("finally" . (:url "/chapter-21/v-29/27" :section "21.3"))
    ("throw" . (:url "/chapter-21/v-29/27" :section "21.3"))
    ("ex-info" . (:url "/chapter-21/v-29/39" :section "21.4"))
    ("ex-data" . (:url "/chapter-21/v-29/39" :section "21.4"))
    ("bean" . (:url "/chapter-21/v-29/50" :section "21.5"))
    ("reflect" . (:url "/chapter-21/v-29/64" :section "21.6"))
    ("type-reflect" . (:url "/chapter-21/v-29/64" :section "21.6"))
    ("make-array" . (:url "/chapter-21/v-29/82" :section "21.7.1"))
    ("object-array" . (:url "/chapter-21/v-29/90" :section "21.7.2"))
    ("int-array" . (:url "/chapter-21/v-29/90" :section "21.7.2"))
    ("boolean-array" . (:url "/chapter-21/v-29/90" :section "21.7.2"))
    ("byte-array" . (:url "/chapter-21/v-29/90" :section "21.7.2"))
    ("short-array" . (:url "/chapter-21/v-29/90" :section "21.7.2"))
    ("char-array" . (:url "/chapter-21/v-29/90" :section "21.7.2"))
    ("long-array" . (:url "/chapter-21/v-29/90" :section "21.7.2"))
    ("float-array" . (:url "/chapter-21/v-29/90" :section "21.7.2"))
    ("double-array" . (:url "/chapter-21/v-29/90" :section "21.7.2"))
    ("to-array" . (:url "/chapter-21/v-29/106" :section "21.7.3"))
    ("into-array" . (:url "/chapter-21/v-29/106" :section "21.7.3"))
    ("to-array-2d" . (:url "/chapter-21/v-29/106" :section "21.7.3"))
    ("aget" . (:url "/chapter-21/v-29/118" :section "21.7.4"))
    ("aset" . (:url "/chapter-21/v-29/118" :section "21.7.4"))
    ("alength" . (:url "/chapter-21/v-29/118" :section "21.7.4"))
    ("aclone" . (:url "/chapter-21/v-29/118" :section "21.7.4"))
    ("amap" . (:url "/chapter-21/v-29/130" :section "21.7.5"))
    ("areduce" . (:url "/chapter-21/v-29/130" :section "21.7.5"))
    ("aset-int" . (:url "/chapter-21/v-29/154" :section "21.7.6"))
    ("aset-boolean" . (:url "/chapter-21/v-29/154" :section "21.7.6"))
    ("aset-byte" . (:url "/chapter-21/v-29/154" :section "21.7.6"))
    ("aset-short" . (:url "/chapter-21/v-29/154" :section "21.7.6"))
    ("aset-char" . (:url "/chapter-21/v-29/154" :section "21.7.6"))
    ("aset-long" . (:url "/chapter-21/v-29/154" :section "21.7.6"))
    ("aset-float" . (:url "/chapter-21/v-29/154" :section "21.7.6"))
    ("aset-double" . (:url "/chapter-21/v-29/154" :section "21.7.6"))
    ("ints" . (:url "/chapter-21/v-29/168" :section "21.7.7"))
    ("booleans" . (:url "/chapter-21/v-29/168" :section "21.7.7"))
    ("bytes" . (:url "/chapter-21/v-29/168" :section "21.7.7"))
    ("shorts" . (:url "/chapter-21/v-29/168" :section "21.7.7"))
    ("chars" . (:url "/chapter-21/v-29/168" :section "21.7.7"))
    ("longs" . (:url "/chapter-21/v-29/168" :section "21.7.7"))
    ("longs" . (:url "/chapter-21/v-29/168" :section "21.7.7"))
    ("floats" . (:url "/chapter-21/v-29/168" :section "21.7.7"))
    ("doubles" . (:url "/chapter-21/v-29/168" :section "21.7.7"))

    ;; toolbox
    ("clojure.xml/parse" . (:url "/chapter-22/v-29/12" :section "22.1"))
    ("clojure.inspector/inspect-tree" . (:url "/chapter-22/v-29/28" :section "22.2"))
    ("clojure.inspector/inspect-table" . (:url "/chapter-22/v-29/28" :section "22.2"))
    ("clojure.repl/doc" . (:url "/chapter-22/v-29/43" :section "22.3.1"))
    ("clojure.repl/find-doc" . (:url "/chapter-22/v-29/48" :section "22.3.2"))
    ("clojure.repl/apropos" . (:url "/chapter-22/v-29/51" :section "22.3.3"))
    ("clojure.repl/dir" . (:url "/chapter-22/v-29/54" :section "22.3.4"))
    ("clojure.repl/dir-fn" . (:url "/chapter-22/v-29/57" :section "22.3.5"))
    ("clojure.repl/source" . (:url "/chapter-22/v-29/60" :section "22.3.6"))
    ("clojure.repl/source-fn" . (:url "/chapter-22/v-29/69" :section "22.3.7"))
    ("clojure.repl/pst" . (:url "/chapter-22/v-29/72" :section "22.3.8"))
    ("clojure.repl/root-cause" . (:url "/chapter-22/v-29/83" :section "22.3.9"))
    ("clojure.repl/munge" . (:url "/chapter-22/v-29/86" :section "22.3.10"))
    ("clojure.repl/demunge" . (:url "/chapter-22/v-29/86" :section "22.3.10"))
    ("clojure.repl/stack-element-str" . (:url "/chapter-22/v-29/86" :section "22.3.10"))
    ("clojure.main/load-script" . (:url "/chapter-22/v-29/102" :section "22.4.1"))
    ("clojure.main/repl" . (:url "/chapter-22/v-29/107" :section "22.4.2"))
    ("clojure.java.browse/browse-url" . (:url "/chapter-22/v-29/116" :section "22.5"))
    ("clojure.java.browse/*open-url-script*" . (:url "/chapter-22/v-29/116" :section "22.5"))
    ("clojure.java.shell/sh" . (:url "/chapter-22/v-29/125" :section "22.6"))
    ("clojure.core.server/repl" . (:url "/chapter-22/v-29/140" :section "22.7"))
    ("clojure.core.server/stop-server" . (:url "/chapter-22/v-29/160" :section "22.7.1"))
    ("clojure.java.io/reader" . (:url "/chapter-22/v-29/171" :section "22.8.2"))
    ("clojure.java.io/with-open" . (:url "/chapter-22/v-29/175" :section "22.8.3"))
    ("clojure.java.io/writer" . (:url "/chapter-22/v-29/182" :section "22.8.4"))
    ("clojure.java.io/resource" . (:url "/chapter-22/v-29/194" :section "22.8.6"))
    ("clojure.java.io/as-url" . (:url "/chapter-22/v-29/197" :section "22.8.7"))
    ("clojure.java.io/file" . (:url "/chapter-22/v-29/204" :section "22.8.9"))
    ("clojure.java.io/copy" . (:url "/chapter-22/v-29/210" :section "22.8.10"))
    ("clojure.java.io/make-parents" . (:url "/chapter-22/v-29/216" :section "22.8.11"))
    ("clojure.java.io/delete-file" . (:url "/chapter-22/v-29/219" :section "22.8.12"))
    ("clojure.java.io/as-relative-path" . (:url "/chapter-22/v-29/222" :section "22.8.13")))
  "Index of all the known symbols and their (URL) location in the book.")



;; COMMANDS

(defun clojure-essential-ref (&optional arg)
  "Open Clojure documentation for symbol.

Book \"Clojure, The Essential Reference\" is used as a documentation source.

Prompts for the symbol to use, or uses the symbol at point, depending on
the value of `cider-prompt-for-symbol'.  With prefix arg ARG, does the
opposite of what that option dictates."
  (interactive "P")
  (cider-ensure-connected)

  (if (called-interactively-p 'any)
      (funcall (cider-prompt-for-symbol-function arg)
               "Doc for"
               clojure-essential-ref-default-browse-fn)
    (unless arg
      (error "Need to pass an argument when called non-interactively"))
    (funcall clojure-essential-ref-default-browse-fn arg)))

(defun clojure-essential-ref-web (&optional arg)
  "Open Clojure documentation for symbol in the default web browser.

Online version of book \"Clojure, The Essential Reference\" is
used as a documentation source.

Prompts for the symbol to use, or uses the symbol at point, depending on
the value of `cider-prompt-for-symbol'.  With prefix arg ARG, does the
opposite of what that option dictates."
  (interactive "P")
  (let ((clojure-essential-ref-default-browse-fn #'clojure-essential-ref-browse-web))
    (if (called-interactively-p 'any)
        (call-interactively #'clojure-essential-ref nil (vector arg))
      (funcall #'clojure-essential-ref arg))))



;; LOOKUP

(defun clojure-essential-ref--get-props (symbol)
  "Get props (section id...) for SYMBOL."
  (setq symbol (clojure-essential-ref--resolve-symbol symbol))
  (cdr (assoc symbol clojure-essential-ref--index)))

(defun clojure-essential-ref--resolve-symbol (symbol)
  "Gets the fully-qualified name for SYMBOL."
  (let* ((info (cider-var-info symbol))
         (ns (nrepl-dict-get info "ns"))
         (name (nrepl-dict-get info "name")))
    (if (and ns
             (not (string= ns "clojure.core")))
        (concat ns "/" name)
      name)))



;; BROWSE

(defun clojure-essential-ref-browse-web (symbol)
  "Open doc in Clojure Essential Ref for SYMBOL in web browser."
  (let ((props (clojure-essential-ref--get-props symbol)))
    (unless props
      (error "Couldn't find reference to %s in book index" symbol))
    (browse-url (clojure-essential-ref--build-url props))))

(defun clojure-essential-ref--build-url (props)
  "Build url according to the symbol PROPS from clojure-essential-ref--index."
  (funcall clojure-essential-ref--build-url-fn props))

(defun clojure-essential-ref--build-url-from-raw-url-path (props)
  "Build url according to the url suffix in the symbol PROPS from clojure-essential-ref--index."
  (concat clojure-essential-ref--base-url (plist-get props :url)))

(defun clojure-essential-ref--build-url-from-section-id (props)
  "Build url according to the section id in the symbol PROPS from clojure-essential-ref--index."
  (let* ((section (plist-get props :section))
         (chapter (car (split-string section "\\."))))
    (concat clojure-essential-ref--base-url "/chapter-" chapter "/section-" section)))




(provide 'clojure-essential-ref)

;;; clojure-essential-ref.el ends here
