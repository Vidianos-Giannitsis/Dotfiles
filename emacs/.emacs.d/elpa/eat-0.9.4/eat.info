This is docQL52HQ.info, produced by makeinfo version 6.8 from eat.texi.

This manual is for Eat (version 0.9.4, 15 December 2023), a terminal
emulator for Emacs.

   Copyright © 2022, 2023 Akib Azmain Turja.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled “GNU Free Documentation License”.
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Eat: (eat).           Emulate A Terminal.
END-INFO-DIR-ENTRY


File: docQL52HQ.info,  Node: Top,  Next: Intro,  Up: (dir)

Eat Manual
**********

This manual is for Eat (version 0.9.4, 15 December 2023), a terminal
emulator for Emacs.

   Copyright © 2022, 2023 Akib Azmain Turja.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled “GNU Free Documentation License”.

* Menu:

Introduction
* Intro::               What is Eat?
* Hello Terminal::      Starting Eat’s terminal for the first time.
* Project-local Terminal::  One project, one terminal.
* Eshell Terminal::     Eat’s terminal emulation in Eshell.

Basic Operations
* Keyboard::            Most keyboard keys are captured by Eat.
* Mouse::               Eat supports mouse.
* Input Modes::         Input modes for various use-cases.
* Password Input::      Safely inputting credentials.

Advanced Customizations
* Shell Integration::   Getting the most from Eat and your shell.
* Querying Before Kill::  Confirming before you kill your terminal.
* Display::             The region where everything is shown.
* Scrollback::          Region for things that went out of display.
* Cursor Types::        Cursor can displayed in many forms.
* Mouse Tracking::      Eat tracks mouse, but this can be changed.
* Clipboard::           Integrating kill ring with terminal.
* Colors::              Eat can show more than sixteen million colors.
* Fonts::               Eat can show up to sixteen different fonts.
* Blinking Text::       Annoying blinking texts.
* Performance Tuning::  Fine tuning to maximize performance.

Recovering from Problems
* Common Problems::     Common problem, and fixes.
* Reporting Bugs::      How to report problems?
* Tracing the Terminal::  Gathering some crucial information to
                          reproduce a bug.

Appendices
* GNU General Public License::  Copying condition for Eat.
* GNU Free Documentation License::  Copying conditions of this manual.
* Index::               A list of various things.


File: docQL52HQ.info,  Node: Intro,  Next: Hello Terminal,  Prev: Top,  Up: Top

1 Introduction
**************

Eat (Emulate A Terminal) is a terminal emulator for Emacs.  It emulates
a XTerm-like terminal, just like many other terminal emulators.  But it
has some key features that make Eat distinct from other terminal
emulators.

   Firstly, it’s in Emacs, which means you don’t need to leave the
comfort of Emacs to use terminal.

   Secondly, it’s easy and convenient to use.  It is tries to stay out
of your way, allowing you to maximize your productivity.

   Finally, special care has been taken while designing the keybindings,
so that the terminal doesn’t conflict with Emacs default keybindings on
both graphical display and text display, while still allowing you to run
full screen programs like Emacs within the terminal.


File: docQL52HQ.info,  Node: Hello Terminal,  Next: Project-local Terminal,  Prev: Intro,  Up: Top

2 Hello Terminal
****************

The terminal can be started with ‘M-x eat’.  It’ll create a terminal and
run the default shell (*note (emacs)Interactive Shell::) in it.  You
should get a shell prompt and be able to write shell commands and
execute them.  Full screen programs like ‘htop’, ‘lynx’ and Emacs will
work inside it, just like any other terminal.  (If the terminal doesn’t
work as expected, *note Common Problems::.)

   If an Eat terminal already exists, ‘M-x eat’ will switch to it.  To
create a new terminal, call it with a prefix argument like this, ‘C-u
M-x eat’.

   If you give it a numeric prefix argument N, for example ‘C-u 42 M-x
eat’, it’ll switch to a terminal in the buffer ‘*eat*<N>’, ‘*eat*<42>’
for example, or it’ll create a new terminal if that buffer doesn’t
exist.

   If you give it double prefix argument, for example ‘C-u C-u M-x eat’,
you’ll be prompted for the program or shell command to run, and it’ll be
run in a newly created terminal.


File: docQL52HQ.info,  Node: Project-local Terminal,  Next: Eshell Terminal,  Prev: Hello Terminal,  Up: Top

3 Project-local Terminal
************************

Usually, you don’t use a single terminal for everything, instead you
open a terminal for each project that needs it.  So there is command
named ‘eat-project’.  It opens a new terminal in project root directory,
or switches to a already existing project terminal.  It too accepts
prefix argument, just like the ordinary ‘eat’ command.


File: docQL52HQ.info,  Node: Eshell Terminal,  Next: Keyboard,  Prev: Project-local Terminal,  Up: Top

4 Eshell Terminal Emulation
***************************

Eat also supports terminal emulation outside Eat’s terminal.  So you can
emulate terminal in Eshell (*note (eshell)Top::) with Eat.  After
configuring Eshell to use Eat for terminal emulation, you can run any
full screen terminal program in Eshell.

   To enable terminal emulation in Eshell, enable the global minor mode
‘eat-eshell-mode’.  It will enable Eat’s terminal emulation in Eshell.
To disable the terminal emulation, disable the minor mode.

   You can’t toggle the global minor mode while any Eshell command is
running, so terminate any Eshell command or wait them to finish before
toggling the mode.

   Unless stated otherwise, everything described in this manual about
Eat terminal also applies to Eshell terminal emulation.

   You might also want to set ‘eshell-visual-commands’ user option to
nil, since they’ll work in Eshell when ‘eat-eshell-mode’ is enabled.

   If you want to run Eshell visual commands with Eat, you can enable
the global minor mode ‘eat-eshell-visual-command-mode’.


File: docQL52HQ.info,  Node: Keyboard,  Next: Mouse,  Prev: Eshell Terminal,  Up: Top

5 Keyboard
**********

Just like any other text terminal, the primary interaction device with
Eat terminal is the keyboard.  Eat forwards all supported keyboard
events like ‘a’, ‘E’, ‘RET’, ‘C-a’ to the terminal.

   However, this conflict with Emacs keybinding conventions, and makes
it almost impossible to call any other Emacs command.  So, by default,
Eat doesn’t intercept the key sequences beginning with the following
keys and lets Emacs to handle them: ‘C-\’, ‘C-c’, ‘C-x’, ‘C-g’, ‘C-h’,
‘C-M-c’, ‘C-u’, ‘C-q’, ‘M-x’, ‘M-:’, ‘M-!’ and ‘M-&’.

   To input the above key sequences, prefix them with ‘C-q’.  ‘C-q’
reads the next event and sends to directly to the terminal.  For
example, to input ‘M-:’, use the key sequence ‘C-q M-:’.

   For an alternative way to input these exceptional characters, *note
Char Mode::.


File: docQL52HQ.info,  Node: Mouse,  Next: Input Modes,  Prev: Keyboard,  Up: Top

6 Mouse
*******

Eat supports mouse tracking.  That means in programs like Emacs, ‘htop’,
etc, that support mouse, you can hover and click on text and buttons.
You can also use your mouse wheel to scroll text, if the program
supports it.

   *Note Mouse Tracking:: to configure mouse tracking.


File: docQL52HQ.info,  Node: Input Modes,  Next: Password Input,  Prev: Mouse,  Up: Top

7 Input Modes
*************

By default, Eat forwards all supported keys to terminals, except some
exceptions.  It is possible to input them with ‘C-q’, but it is not very
convenient.

   To conveniently input those character, they should be bound to input
themselves to the terminal (i.e.  pressing ‘M-x’ will input ‘M-x’,
bypassing Emacs).  But this is conflicts with Emacs’s default
keybindings, so this can’t done, at least by default.

   To overcome the problem, Eat implements several “input modes”.  Each
input mode has a different set of keybindings for different
applications.

7.1 Semi-char Mode
==================

“Semi-char mode” is the default input mode of Eat.  This works for most
inputs.  It forwards all keys, except ‘C-\’, ‘C-c’, ‘C-x’, ‘C-g’, ‘C-h’,
‘C-M-c’, ‘C-u’, ‘M-x’, ‘C-q’, ‘M-:’, ‘M-!’, ‘M-&’ and some other keys,
Emacs handles them.

   To input these exceptions, there is a key ‘C-q’.  This reads the next
input event and sends that as the input.  For example, the key sequences
‘C-q M-:’ inputs ‘M-:’, ‘C-q C-g’ inputs ‘C-g’.

   Input methods (*note (emacs)Input Methods::) work in this mode, so,
unlike Term (*note Emacs Terminal Emulator: (emacs)Terminal emulator.),
Emacs built-in terminal emulator, you can still input any character.

   In “semi-char mode”, ‘C-c C-c’ sends a ‘C-c’, just for convenience,
and ‘C-c C-k’ kills the terminal program.

   You can customize the exceptions by customizing the user option
‘eat-semi-char-non-bound-keys’, and
‘eat-eshell-semi-char-non-bound-keys’ for Eshell integration.  Both user
options contain a list of keys of form ‘[KEY]’, where KEY is a key not
to bind.  KEY mustn’t contain meta modifier.  To not bind a key with
meta modifier, use a vector of form ‘[?\e KEY]’, where KEY is the key
without meta modifier.  These user options contain all the “semi-char”
mode exceptions listed above, plus some more exceptions.

   If you set the user options manually (for example, with ‘setq’), you
must call ‘eat-update-semi-char-mode-map’ or
‘eat-eshell-update-semi-char-mode-map’ respectively, and finally reload
Eat (you can do this with the command ‘eat-reload’).  Or alternatively
you can set the user options before Eat is loaded.

7.2 Char Mode
=============

By default, Eat is in “semi-char mode”.  In this input mode, Eat
forwards all supported keys to terminals, except some exceptions, *note
Semi-char Mode::.  It is possible to input them with ‘C-q’, but it is
not very convenient.

   To overcome this problem, Eat implements another input mode called
“char mode”.  To switch to “char mode”, press ‘C-c M-d’ in “semi-char
mode”.  In Eshell, the command ‘eshell-toggle-direct-send’ is remapped
to enable “char-mode”, which is usually bound to ‘C-c M-d’.

   In this input mode, Eat forwards all supported keys.  However, input
methods still work in this mode, so you can still input keys that are
not on your keyboard.

   To get out of “char mode”, press ‘C-M-m’ or ‘M-<RET>’, this switches
back to “semi-char mode”.

7.3 Emacs Mode
==============

In “emacs mode”, no input events are send to the terminal.  In this
mode, you can interact with the terminal buffer just like a regular
buffer.  However, you are not allowed to change the buffer contents.

   To switch to “emacs mode”, press ‘C-c C-e’ from “semi-char mode”.

   In this mode, ‘C-c C-k’ kills the terminal program like in “semi-char
mode”.

   From “emacs mode”, you can switch to “semi-char mode” with ‘C-c C-j’
and to “char mode” with ‘C-c M-d’.  In Eshell, the command
‘eshell-toggle-direct-send’ is remapped to enable “char-mode”, which is
usually bound to ‘C-c M-d’.

7.4 Line Mode
=============

In “line mode”, input is sent one line at a line, similar to Comint or
Shell mode (*note (emacs)Interactive Shell::).  Like “emacs mode”, you
can interact with buffer as you wish; but at the very end of the buffer,
you can edit the input line with usual Emacs commands.  This is not
available in Eshell.

   To enter “line mode”, press ‘C-c C-l’ from “semi-char mode” or “emacs
mode”.

   ‘<RET>’ sends the current input with a trailing newline, and clear
the input area for new input to be written.  When called with a prefix
argument, no newline is appended before sending input.  To input a
newline character without actually sending it, you can press ‘C-c
<SPC>’.

   ‘C-c C-c’ discards the input completely and sends an interrupt to the
terminal.  ‘C-d’ deletes the character after the point, or sends EOF if
the input is empty.

   You can’t modify the terminal in “line mode”, you can write only in
the input line.  Eat automatically moves the point to the input line if
you try to insert character in the terminal region.  This behavior can
be disabled by customizing ‘eat-line-auto-move-to-input’ to ‘nil’.

   You can exit to “emacs mode”, “semi-char mode” or “char mode” with
‘C-c C-e’, ‘C-c C-j’ or ‘C-c M-d’ respectively.  If there’s any pending
input when exiting line mode, it is sent as is to the terminal.

   The input history is recorded.  You can cycle through the history
with ‘M-p’ and ‘M-n’, and also with ‘C-<up>’ and ‘C-<down>’.  ‘C-c M-r’
and ‘C-c M-s’ searches the input history taking the current input as the
query.  ‘C-c M-r’ searches backward while ‘C-c M-s’ searches forward.
And ‘C-c C-r’ searches the input history using minibuffer with
completion, useful specially if you use any minibuffer completion
UI/framework.

   You can also use Isearch (*note (emacs)Incremental Search::) to
search through the input history, with ‘M-r’.  You can also customize
‘eat-line-input-history-isearch’ to use all standard Isearch commands to
search the input history.

 -- User Option: eat-line-input-history-isearch
     Controls where Isearch searches in Eat buffer.  If ‘t’, usual
     Isearch commands in Eat buffer search in the input history.  If
     ‘dwim’, Isearch keys search in the input history only when initial
     point position is on input line.  When starting Isearch from other
     parts of the Eat buffer, they search in the Eat buffer.  If ‘nil’,
     Isearch operates on the whole Eat buffer.

   Input history is not loaded from the shell history file, to do that,
*Note Line Mode Integration::.


File: docQL52HQ.info,  Node: Password Input,  Next: Shell Integration,  Prev: Input Modes,  Up: Top

8 Password Input
****************

By default, every keystroke gets recorded in the lossage, which can be
seen by pressing ‘C-h l’.  This is actually a good thing, unless you’re
inputting password.

   Emacs doesn’t record keystrokes when a password is read from the
minibuffer.  However, when the password prompt is in the terminal, the
keys you use to type in your password gets recorded.  To prevent this
from happening, you can use the command ‘eat-send-command’, it’ll read
password from the minibuffer and send it.  Since the password is read
from the minibuffer, it’s not recorded.


File: docQL52HQ.info,  Node: Shell Integration,  Next: Querying Before Kill,  Prev: Password Input,  Up: Top

9 Shell Integration
*******************

Eat comes with shell scripts to integrate your favorite shell with Eat.
When shell integration is enabled and the script is loaded in your
shell, it’ll take care of everything and provide many useful features.

   Currently only GNU Bash and Zsh are supported.

   If you use GNU Bash, put the following in your ‘.bashrc’ file:

     [ -n "$EAT_SHELL_INTEGRATION_DIR" ] && \
       source "$EAT_SHELL_INTEGRATION_DIR/bash"

   If you use Zsh, put the following in your ‘.zshrc’ file:

     [ -n "$EAT_SHELL_INTEGRATION_DIR" ] && \
       source "$EAT_SHELL_INTEGRATION_DIR/zsh"

9.1 Directory tracking
======================

After you’ve setup shell integration, the Eat will track the working
directory of your shell.  That means ‘find-file’ will start from your
shell’s current working directory.  This also works in Eshell, but after
the program exits, the current working directory is changed back to the
directory from where the program was invoked.

 -- User Option: eat-enable-directory-tracking
     This controls directory tracking.  When set to non-‘nil’, Eat
     tracks the current working directory of programs.

9.2 Shell Prompt Navigation
===========================

You can navigate shell prompts in “emacs” and “semi-char” mode.  ‘C-c
C-p’, bound to ‘eat-previous-shell-prompt’, goes to the previous shell
prompt.  ‘C-c C-n’, bound to ‘eat-next-shell-prompt’, is the opposite,
it goes to the next shell prompt.  This doesn’t work in Eshell.

   You can narrow (*note (emacs)Narrowing::) down Eat buffer to a shell
prompt and its output (if any) using the key sequence ‘C-x n d’, bound
to ‘eat-narrow-to-shell-prompt’.

9.3 Shell Prompt Annotation
===========================

When shell integration is setup, Eat annotates each shell prompt.  Eat
puts a mark on the shell prompt indicating the whether the command
entered in that prompt is running, exited successfully or exited with
non-zero status.  This doesn’t work in Eshell.  You can disable this
feature if you want.

 -- User Option: eat-enable-shell-prompt-annotation
     This controls shell prompt annotation by Eat.  When set to
     non-‘nil’, Eat annotates shell prompts to indicate the status of
     the command entered in that prompt.

   Eat uses the marginal area (*note (elisp)Display Margins::) on the
left side to display the annotation.  You also use the right margin.

 -- User Option: eat-shell-prompt-annotation-position
     This controls where the shell prompt annotations are displayed.
     When set to ‘left-margin’ (the default), Eat uses the left margin.
     When set to ‘right-margin’, Eat uses the right margin.

   Eat uses the strings “-”, “0” and “X” respectively to indicate the
command is running, the command has succeeded and the command has
failed.  You can also customize the them.  The user option
‘eat-shell-prompt-annotation-running-margin-indicator’ and the face
‘eat-shell-prompt-annotation-running’ control the indicator used to
indicate the command is running.  The user option
‘eat-shell-prompt-annotation-success-margin-indicator’ and the face
‘eat-shell-prompt-annotation-success’ control the indicator used to
indicate the command has exited successfully.  And finally the user
option ‘eat-shell-prompt-annotation-failure-margin-indicator’ and the
face ‘eat-shell-prompt-annotation-failure’ control the indicator used to
indicate the command has exited unsuccessfully with non-zero exit
status.

9.4 Message Passing
===================

After enabling shell integration, you can send messages to Emacs from
your shell.  Then you can handle the message on Emacs side using usual
Emacs Lisp function.

   When shell integration script is loaded, a function named ‘_eat_msg’
is defined in your shell.  You can use this to send any message to
Emacs.  (The ‘_’ in the beginning of the function name is intentional to
prevent shadowing any actual command.)

 -- Command: _eat_msg HANDLER-NAME MESSAGE...
     Send message MESSAGE, handled by the handler named HANDLER-NAME in
     Emacs.

   The messages are handled with the handlers defined in
‘eat-message-handler-alist’.

 -- User Option: eat-message-handler-alist
     Alist of message handler name and its handler function.  The keys
     are the names of message handlers (i.e.  the HANDLER-NAME argument
     of ‘_eat_msg’), and the values are their respective handler
     functions.  The handler function is called with the MESSAGE
     arguments of ‘_eat_msg’.  Messages with undefined handlers are
     ignored.  To disable message passing, set this to nil.

   Beware, messages can be sent by malicious and/or buggy programs
running in the shell, therefore you should always verify the message
before doing anywhere.

9.5 Line Mode Integration
=========================

When shell integration is enabled, the input history of line mode is
automatically filled with the shell history when the shell starts.  Also
you can make Eat automatically switch to “line mode” (*note Line Mode::)
for you when the shell prompt appears.

 -- User Option: eat-enable-auto-line-mode
     When non-nil, automatically switch to line mode the shell prompt
     appears.


File: docQL52HQ.info,  Node: Querying Before Kill,  Next: Display,  Prev: Shell Integration,  Up: Top

10 Querying Before Kill
***********************

When a terminal is killed, the terminal process is also killed.  Since
the process can do some important things, Eat asks for confirmation
before killing a terminal with running process by default.  Eat provides
the user option ‘eat-query-before-killing-running-terminal’ to control
this.

 -- User Option: eat-query-before-killing-running-terminal
     When set to ‘nil’, Eat would never ask.  When set to ‘t’, Eat would
     always ask for confirmation.  When set to ‘auto’, Eat would ask
     only if a shell command is running inside the shell running in the
     terminal.  This is effective only after shell integration is
     enabled in the shell (*note Shell Integration::) (i.e.  after the
     shell integration code is executed on shell); before that it is
     essentially same as ‘t’, and Eat will always query.


File: docQL52HQ.info,  Node: Display,  Next: Scrollback,  Prev: Querying Before Kill,  Up: Top

11 Display
**********

Display is the region you see on the terminal.  The program writes to
the display and manipulates the text on the display.  The display can be
of any size.  The cursor is always on the display (though it might be
invisible sometimes, *note Cursor Types::).

   You can resize the display by resizing the terminal window.  The
display size is controlled by the Emacs user option
‘window-adjust-process-window-size-function’.  *Note (elisp)Process
Buffers:: for the possible values of the user option.


File: docQL52HQ.info,  Node: Scrollback,  Next: Cursor Types,  Prev: Display,  Up: Top

12 Scrollback
*************

When you go too downward on the terminal, the terminal starts to
“scroll”.  This causes the line at the upper side of the terminal to go
out of the display and become hidden.  But these line are not deleted,
they are just put in the scrollback region.

   Scrollback region is a region just above the display of the terminal.
This contains the lines that went out of display due to scrolling up.

   Scrollback region is not unlimited by default, to avoid using too
much memory.  You can change the limit, or remove it altogether.

 -- User Option: eat-term-scrollback-size
     This controls the size of scrollback region.  It is expressed in
     character.  If set to SIZE, Eat won’t store more than SIZE
     characters in the scrollback region.  If set to ‘nil’, the
     scrollback region is unlimited.


File: docQL52HQ.info,  Node: Cursor Types,  Next: Mouse Tracking,  Prev: Scrollback,  Up: Top

13 Cursor Types
***************

In terminal, cursor can be of up to three type: “visible”, “invisible”
and “very visible”.  “Visible” is the default cursor type, which is the
cursor you usually see in a shell (unless the shell changes the cursor
type).  “Invisible” is, as the name suggests, invisible, you can’t see
it.  “Very visible” cursor is a blinking cursor, programs use this to
help you not lose the cursor.

   The cursor type can customized with three user options for the three
types of cursor.  Each of the user options share the same format.

 -- User Option: eat-default-cursor-type
     This controls the cursor shape of the “visible” cursor type.

 -- User Option: eat-invisible-cursor-type
     This controls the cursor shape of the “invisible” cursor type.

 -- User Option: eat-very-visible-cursor-type
     This controls the cursor shape of the “very visible” cursor type.
     This cursor blinks, switching between the default cursor shape and
     a hollow box.

 -- User Option: eat-vertical-bar-cursor-type
     This controls the cursor shape of the “vertical bar” cursor type.

 -- User Option: eat-very-visible-vertical-bar-cursor-type
     This controls the cursor shape of the “very visible vertical bar”
     cursor type.  This cursor blinks.

 -- User Option: eat-horizontal-bar-cursor-type
     This controls the cursor shape of the “horizontal bar” cursor type.

 -- User Option: eat-very-visible-horizontal-bar-cursor-type
     This controls the cursor shape of the “very visible horizontal bar”
     cursor type.  This cursor blinks.

   The value type of all these user options is a list.  The list is of
form (CURSOR-ON BLINKING-FREQUENCY CURSOR-OFF).  BLINKING-FREQUENCY is
the frequency of blinking of cursor.  It is a number, controlling how
many times the cursor will blink a second.  This can also be ‘nil’, this
will disable cursor blinking.  CURSOR-ON is the default cursor shape,
only this shape is shown on the display when blinking is disabled.  This
uses the same format as Emacs’s ‘cursor-type’ user option (*note
(emacs)Cursor Display::).  When BLINKING-FREQUENCY is a number, Eat will
consult to the third element of the list, CURSOR-OFF, whose format same
as CURSOR-ON.  The blinking cursor switches between CURSOR-ON and
CURSOR-OFF cursor shape.


File: docQL52HQ.info,  Node: Mouse Tracking,  Next: Clipboard,  Prev: Cursor Types,  Up: Top

14 Mouse Tracking
*****************

Eat tracks mouse by default, when the program supports mouse.  But
sometimes, you may want to avoid using mouse, or you might not have a
mouse at all.  So mouse tracking can be toggled.

 -- User Option: eat-enable-mouse
     This user option controls mouse tracking.  When set to non-‘nil’,
     mouse tracking is enabled.  Set to this to ‘nil’ to disable mouse
     tracking.  This is enabled by default.


File: docQL52HQ.info,  Node: Clipboard,  Next: Colors,  Prev: Mouse Tracking,  Up: Top

15 Clipboard
************

Just like any other buffer, you can yank text in terminal with ‘C-y’
(bound to ‘eat-yank’) or ‘M-y’ (bound to ‘eat-yank-pop’) in “semi-char
mode”.

   Programs can also request to the terminal to kill (*note
(emacs)Killing::) something.  It is up to Eat whether the request will
be fulfilled or not.  By default, Eat fulfills the request and kills the
text.  This can sometimes be annoying, when the program automatically
kills text without user interaction.  This killing can be configured
with the following user option:

 -- User Option: eat-enable-kill-from-terminal
     This controls killing texts from terminal.  When set to non-‘nil’,
     killing something from terminal add the text to Emacs’s kill ring
     (*note (emacs)Kill Ring::).  This is enabled by default.

   Programs can also request the text in kill ring.  Again, this is up
to Eat whether the request will be fulfilled or not.  You can customize
the following user option to configure this:

 -- User Option: eat-enable-yank-to-terminal
     This controls sending kill ring texts to terminal.  When set to
     non-‘nil’, programs can receive the kill ring contents.  This is
     disabled by default for security reasons.


File: docQL52HQ.info,  Node: Colors,  Next: Fonts,  Prev: Clipboard,  Up: Top

16 Colors
*********

Eat can show more than 16 million colors (16,777,216 colors exactly).
Eat has also a palette of 256 colors, which is more than enough for most
applications.  Programs usually use this color palette.  Each of these
256 colors can customized.

   There are 256 faces for the 256 colors, one face for each color.
They are named like ‘eat-term-color-N’, which corresponds to color N,
and N can be any number between 0 and 255 (inclusive).  For example,
color 42 is can be changed by customizing ‘eat-term-color-42’.

   The foreground attribute contains the color value to use for the
corresponding color.  Other attributes are currently ignored and
reserved for future changes.

   Each of the first 16 colors, from ‘eat-term-color-0’ to
‘eat-term-color-15’ also have a alias.  They are respectively
‘eat-term-color-black’, ‘eat-term-color-red’, ‘eat-term-color-green’,
‘eat-term-color-yellow’, ‘eat-term-color-blue’,
‘eat-term-color-magenta’, ‘eat-term-color-cyan’, ‘eat-term-color-white’,
‘eat-term-color-bright-black’, ‘eat-term-color-bright-red’,
‘eat-term-color-bright-green’, ‘eat-term-color-bright-yellow’,
‘eat-term-color-bright-blue’, ‘eat-term-color-bright-magenta’,
‘eat-term-color-bright-cyan’ and ‘eat-term-color-bright-white’.

   Eat also supports 24-bit colors, or so called “truecolor”.  Programs
like Emacs can give a RGB triplet to use as the color of some text.  As
the programs directly specify the color in this case, you can’t
customize these color.  But you may configure the program sending the
color codes.

   Eat doesn’t always advertise color support depending on the display
Eat is running.  For example, if you are on a Linux console which
supports only eight colors, Eat will advertise eight color support to
the programs, while on graphical displays with 24-bit color support, Eat
will report 24-bit color support.  This is because Eat supports more
colors, the display doesn’t always support them.

   Eat does the trick by setting the ‘TERM’ environment variable of the
program.  The value of ‘TERM’ depends on the number of the available
colors on the display.  This environment variable is controlled by the
following user option:

 -- User Option: eat-term-name
     The value of ‘TERM’ environment variable as a string.  The value
     can also be a function taking no arguments, that function should
     return a string which used as the value of ‘TERM’.  The default
     value is ‘eat-term-get-suitable-term-name’, which is responsible
     for the behavior described above.


File: docQL52HQ.info,  Node: Fonts,  Next: Sixel,  Prev: Colors,  Up: Top

17 Fonts
********

Programs may request the terminal to change the text font.  It can
change text weight, use italic text, or even change the font family
altogether.

   Programs may request the terminal to show some text bolder than
normal.  Bold text uses the face ‘eat-term-bold’.

   Programs may also request the terminal to show some text fainter than
normal.  Faint text uses the face ‘eat-term-faint’.

   Programs may request the terminal to show italic text too.  Italic
text uses the customizable face ‘eat-term-italic’.

   The number of available fonts is ten.  Most of the programs doesn’t
change the font.  Following many other terminal emulator, Eat actually
uses the same font, the default font, regardless of the font requested
by the program, by default.

   There are ten faces for ten fonts, one face for each.  They are named
like ‘eat-term-font-N’, which corresponds to color N, and N can be any
number between 0 and 9 (inclusive).  For example, the font 6 is can be
changed by customizing ‘eat-term-font-6’.  Font 0 is the default font.


File: docQL52HQ.info,  Node: Sixel,  Next: Blinking Text,  Prev: Fonts,  Up: Top

18 Sixel
********

Eat can show Sixel graphics.  Sixel is a bitmap graphics format that can
be used to display graphics in a terminal, for example, images, or
plotting graphs.

   You can control the display of Sixel images by customizing the
following user options.

 -- User Option: eat-sixel-scale
     This is a non-negative number that specifies the amount to scale
     the image by.

 -- User Option: eat-sixel-aspect-ratio
     This is a non-negative number that specifies the aspect ratio, i.e.
     the ratio of width and height of a Sixel pixel.  For example, the
     value of 2 means the width of a Sixel pixel is the double of its
     height.

   Eat converts Sixel graphics to an image format Emacs can natively
display.  This preference of image formats can be configured by
customizing the ‘eat-sixel-render-formats’ user option.

 -- User Option: eat-sixel-render-formats
     List of formats to render Sixel, in order of preference.  Each
     element of the list is one of ‘xpm’, ‘svg’, ‘half-block’,
     ‘background’, ‘none’.  ‘xpm’ and ‘svg’ means to use XPM and SVG
     image format respectively, ‘half-block’ means to use UTF-8 half
     block characters, ‘background’ means to just use background color,
     and ‘none’ means to not render the image, instead just clear the
     area.


File: docQL52HQ.info,  Node: Blinking Text,  Next: Performance Tuning,  Prev: Sixel,  Up: Top

19 Blinking Text
****************

Programs can request the terminal to blink some text.  This helps to get
user attention.  But however, often this annoying to many people and
also has accessiblity problems.  So this is disabled by default.

 -- User Option: eat-enable-blinking-text
     This controls the blinking of text with blink attribute.  When set
     to non-‘nil’, Eat arranges that text with blink attribute will
     blink at a certain interval.

   You can toggle blinking temporarily by toggle the buffer-local minor
mode ‘eat-blink-mode’.  This is only effective in the buffer where the
mode is toggled.

   By default, ‘eat-enable-blinking-text’ is set to ‘nil’.  This
disables text blinking and causes the text with blink attribute to be
displayed in inverse video (swapped foreground and background).

   Programs may also request to blink some text more rapidly that other
blinking text.  When blinking is disabled, the face
‘eat-term-slow-blink’ is used for slowly blinking text, and
‘eat-term-fast-blink’ for rapidly blinking text.

   When blinking is enabled, by setting ‘eat-enable-blinking-text’ to
non-‘nil’ value, the following user options can be customized to change
the rate of blinking:

 -- User Option: eat-slow-blink-frequency
     The blinking rate of slowly blinking text.  When set to a number N,
     it causes slowly blinking text to blink N times a second.  The
     value can also be a floating point number.  The default value is 2,
     meaning that the slowing text will blink two times a second.

 -- User Option: eat-fast-blink-frequency
     The blinking rate of rapidly blinking text.  When set to a number
     N, it causes rapidly blinking text to blink N times a second.  The
     value can also be a floating point number as well.  The default
     value is 3, meaning that the slowing text will blink three times a
     second.


File: docQL52HQ.info,  Node: Performance Tuning,  Next: Common Problems,  Prev: Blinking Text,  Up: Top

20 Performance Tuning
*********************

Eat tries to be as fast as possible.  So Eat employs some techniques to
maximize performance.

   Some program choke and hang when given too much input at once.  So
Eat divides large input to smaller chunks and sends the chunks one at a
time.  The maximum size of a input chunk is controlled by
‘eat-input-chunk-size’.

 -- User Option: eat-input-chunk-size
     The value is a integer.  Eat treat input larger than this many
     character as large and breaks it into chunks of at most this size
     before sending the input.

   Programs also break large output into smaller chunks before sending
it to the terminal, for same reason.  Eat doesn’t suffer from the
problem, but there isn’t any standard way to inform programs about this,
and usually there are other obstructions sending large amount of data at
once.  These small chunks create another problem for Eat, flickering.
When updating the whole display, the output is usually pretty large and
the programs break them into smaller chunks.  Each of the chunks update
the display partially.  After receiving the last chunk, the update is
complete and the display can be updated.  But it is impossible for Eat
to guess the last chunk, so Eat has to redisplay or update the display
after receiving each chunk.  This is the reason why sometimes the
terminal shows some old contents and some new.  This only lasts for a
fraction of a second until the next chunk is received and processed.
This is flickering.  This also degrades performance, because redisplay
is an expensive process and takes some time.

   Fixing the flickering completely is not possible.  Eat tries to
decrease flickering by deferring redisplay.  After receiving a chunk,
Eat waits for a tiny fraction of a second.  If another chunk arrives
within the time, the redisplay is postponed.  Then Eat waits for the
same amount of time and this goes on.  When timeout occurs, Eat
processing the output and displays the output.  This causes a small
latency between output arrive and redisplay, but this is usually not
long enough for human eyes to catch it.  This waiting time can be
configured with the following user option:

 -- User Option: eat-minimum-latency
     The value is the time in seconds to wait for the next chunk to
     arrive.  This is the minimum latency between the first chunk after
     a redisplay and the next redisplay.  For example, if you press
     ‘<RET>’ in an empty Bash prompt, the next prompt won’t appear
     before this much time.

     You should set the time to something comfortable for you.  You can
     also set this to zero to disable waiting and showing the output
     instantly, but this would likely cause a lot of flickering.

   However, this waiting raises another problem.  What if you execute
the POSIX command ‘yes’ in the terminal?  It will write infinite “y”s in
the terminal without any delay between them anywhere.  Eat will wait
indefinitely for a delay between two chunks, which will never happen,
unless the program is executed remotely and the connection is slow
enough.  So Eat has a limit for waiting, the display will be always be
updated after this time.  This limit also customizable:

 -- User Option: eat-maximum-latency
     The value is the time in seconds to wait at most for chunk.  In
     case of large burst of output, redisplay is never deferred more
     than this many seconds, and cause a latency of up to this many
     seconds.

     You should set the time to something comfortable for you.  You can
     also set this to zero to disable waiting and showing the output
     instantly, but this would likely cause a lot of flickering.

   Due to some limitations, shell prompt annotations (*note Shell
Integration::) can get messed up sometimes.  Eat automatically corrects
them after each terminal redisplay.  However, this can have some
performance impact when the terminal scrollback and display is large
enough (unless the buffer is narrowed).  So Eat defers the correction.

 -- User Option: eat-shell-prompt-annotation-delay
     The value is the time in seconds to wait for more output before
     correcting shell prompt annotations.

     You should set the time to something comfortable for you.  You can
     also set this to zero to disable waiting and correct annotations
     instantly, but this may cause the terminal to slow down in some
     cases.

   The user options described in this chapter have reasonable default
values, but the default values may change anytime.


File: docQL52HQ.info,  Node: Common Problems,  Next: Reporting Bugs,  Prev: Performance Tuning,  Up: Top

21 Common Problems
******************

This chapter describe how to recognize and handle situations in which
Eat does something unexpected, such as hangs, garbled text, etc.

* Menu:

* Not Recognized::      The program can’t recognize Eat.
* Garbled Text::        When you get garbage on your terminal.
* Input Invisible::     The input is not shown.
* Not Responding::      What to do if Eat is unresponsive.
* Signaled an Error::   The worst and the most unlikely bug.
* Bugs in Manual::      What if there are problems in this manual?


File: docQL52HQ.info,  Node: Not Recognized,  Next: Garbled Text,  Up: Common Problems

21.1 Terminal Not Recognized
============================

If your program says that it can’t recognize the terminal, probably the
‘TERM’ environment variable has a wrong value.

   Check the value of ‘TERM’, if it’s not set to something like
‘eat-...’, check the user option ‘eat-term-name’.  If that’s correct
that your shell might be changing the ‘TERM’ environment variable.  If
‘eat-term-name’ isn’t correct, customize to a suitable value and try
again, your problem should be fixed.

   If ‘TERM’ has the correct value, then probably the Terminfo databases
of Eat are missing.  This can happen if you have installed Eat without
using the package from NonGNU ELPA (*note (emacs)Packages::).  Check
that whether the values of the environment variable ‘TERMINFO’ and the
user option ‘eat-term-terminfo-directory’ match.  If they match,
customize ‘eat-term-terminfo-directory’ to the directory containing the
Terminfo databases, the program should now recognize Eat.  If they don’t
match, then your shell is probably responsible for the problem.

   If the program is not recognizing the terminal even when the correct
directory is set as ‘eat-term-terminfo-directory’, probably the
precompiled Terminfo databases aren’t working properly on your system.
You can invoke the command ‘eat-compile-terminfo’ to recompile it for
your system.

   If you can’t find the directory containing Terminfo databases, you
can compile it yourself.  First, set ‘eat-term-terminfo-directory’ to
the directory where to put the Terminfo databases.  Then invoke the
command ‘eat-compile-terminfo’ to compile the Terminfo databases.


File: docQL52HQ.info,  Node: Garbled Text,  Next: Input Invisible,  Prev: Not Recognized,  Up: Common Problems

21.2 Garbled Text on Terminal
=============================

If the text on the terminal looks wrong, first check out the value of
‘TERM’.  Usually ‘TERM’ has a wrong value set, making programs send
invalid escape sequences.

   First, *note Not Recognized::; the problem is most likely because the
program doesn’t recognize Eat, and it stays silent instead of reporting
that.

   If the problem isn’t resolved after following the instructions in the
previous section, probably the precompiled Terminfo databases aren’t
working properly on your system.  Running the command
‘eat-compile-terminfo’ will recompile it for your system.

   If the problem still persists, may be your program is blindly
assuming that the terminal is XTerm-compatible.  If so, what you are
seeing is the current state of “XTerm-compliance”.  Though it’s not
really a bug, we really want to know what’s problem so that we can fix
it and improve XTerm-compliance.  *Note Reporting Bugs:: for
instructions on sending bug reports or feature request.

   The other potential reason is that Eat is not working.  This is
definitely a bug, so please report it.


File: docQL52HQ.info,  Node: Input Invisible,  Next: Not Responding,  Prev: Garbled Text,  Up: Common Problems

21.3 Input Invisible
====================

This can happen if the ‘stty’ program is unavailable on the system.  Eat
uses ‘stty’ to set various terminal settings including input echoing.
Please install the ‘stty’ program to fix the problem.

   If you are using Eat from Eshell (*note Eshell Terminal::), you might
want to set ‘eat-eshell-fallback-if-stty-not-available’ to handle such
cases.  The user option can be set to three possible value, ‘t’ to
automatically fallback to bare Eshell when ‘stty’ is not available,
‘nil’ to do nothing, and ‘ask’ to ask interactively.


File: docQL52HQ.info,  Node: Not Responding,  Next: Signaled an Error,  Prev: Input Invisible,  Up: Common Problems

21.4 Emacs or Eat Not Responding
================================

If you run something that outputs huge amount of data, your Emacs may
not respond, and even quitting may not work.  Quitting doesn’t work
while doing something terminal related (output processing, for example),
and that’s intentional, because quitting would mess up the terminal.

   The best way to fix it is to stop the program, so that Eat is not
overloaded.  To avoid the problem in future, it is recommended to run
those programs in faster terminals like bare Eshell (i.e.  without
Eat-Eshell), Comint, or external terminal emulators.


File: docQL52HQ.info,  Node: Signaled an Error,  Next: Bugs in Manual,  Prev: Not Responding,  Up: Common Problems

21.5 Eat Signaled an Error
==========================

The worst thing that happen is that Eat might signal an error.  It is
the worst thing possible, because it messes up the terminal, and also a
security hole.  Fortunately, this is very rare.  If you ever find any
such bug, you should report the bug (*note Reporting Bugs::) as soon as
possible with as much information as possible.

   Once the error signaled, your best option is to delete the terminal
and start a new one.  But if you don’t want to delete the terminal, you
can try invoking the command ‘reset’ from your shell.  If for some
reason you can’t do that, invoke the Emacs command ‘eat-reset’.  This
will reset most of the terminal state and give you a clean terminal to
work with.  However, it mayn’t work if you’re really unlucky, in that
case deleting the terminal and starting a new one is your only option.


File: docQL52HQ.info,  Node: Bugs in Manual,  Prev: Signaled an Error,  Up: Common Problems

21.6 Bugs in Manual
===================

Human makes mistake, and we are no exceptions.  But we are trying hard
to improve Eat and it’s manual.

   If you don’t understand something even after a careful rereading,
that’s a bug.

   If you find anything unclear in this manual, that’s a bug.

   This manual’s job is make everything clear, so failing to do that
indicates a bug.

   If the built-in documentation and this manual don’t agree, one of
them must be wrong, and that’s a bug.

   If you Eat doesn’t behave as this manual describes, that’s a bug.

   If you find any typing mistakes, that’s a bug.

   If you find a bug, please report it.  *Note Reporting Bugs:: for
instruction on how to report it.


File: docQL52HQ.info,  Node: Reporting Bugs,  Next: Tracing the Terminal,  Prev: Common Problems,  Up: Top

22 Reporting Bugs
*****************

We welcome bug reports and feature request.  If you think you have found
a bug, please report it.  If you’re doubt, please send it anyway.  We
can’t promise that we’ll fix the bug or implement your feature idea, or
always agree that it’s a bug, but we always want to hear from you.
Please report bugs at <https://codeberg.org/akib/emacs-eat/issues/>.
You may send the bug report by emailing to the maintainer (‘M-x
describe-package <RET> eat <RET>’ would show the email address), but we
prefer the former method, since the report is visible to everyone
immediately.

   The most important principle in reporting a bug is to report _facts_.
Hypotheses and verbal descriptions are useful when they are more
guesses, but in no way substitute for detailed raw data.  You are
encouraged to send you finding about bug, but please make sure to send
the raw data needed to reproduce the bug.

   For bug reports, please try to reproduce the bug with ‘emacs -Q’.
This will disable loading your Emacs configuration, ruling out the
potential bugs in your customizations.  Please include enough
information for us to reproduce the bug with ‘emacs -Q’, so that we have
(or can get) enough information about the bug to fix it.  Some bugs are
hard to reproduce with ‘emacs -Q’, and some are not easily reproducible
at all, in that case please give us the as much information as possible
about Emacs configuration.  Generally speaking, enough information
includes (but not limited to):

   • A description of the bug.

   • The version of Eat you’re running.  (‘M-x describe-package RET eat
     RET’ would show the version.)

   • The version of Emacs you’re running.

   • Your Eat configuration, precisely.

   • If you didn’t or can’t reproduce the bug with ‘emacs -Q’, as much
     information as possible about Emacs configuration.

   • Precisely what you did.

   • Trace output, if you can generate it.  (*Note Tracing the
     Terminal:: for instruction to generate it.)

   • Hardware and operating system names and versions.

   • Anything else that you think would be helpful.

   When in doubt whether to include something or not, please include it.
It is better to include many useless information than to leave out
something useful.

   It is critical to send enough information to reproduce the bug.  What
is not critical to “narrow down” the example to the smallest possible –
anything that reproduces the bug will suffice.  (Of course, if you like
doing experiments, the smaller the example, the better.)


File: docQL52HQ.info,  Node: Tracing the Terminal,  Next: GNU General Public License,  Prev: Reporting Bugs,  Up: Top

23 Tracing the Terminal
***********************

When you run into a bug and want to report it, you’ll want to trace the
terminal.  Tracing means recording all the terminal activity, including
creation, output, resizing and deleting.

   To enable tracing, enable the global minor mode ‘eat-trace-mode’.
This will trace all new terminals, including the terminal created inside
Eshell.

   Trace output for each command will be output in a buffer named
‘*eat-trace BUFFER-NAME*: COMMAND’, where BUFFER-NAME is the buffer
showing the terminal, and COMMAND is the command run in the terminal.

   Only the terminals created after the trace mode is enabled are
traced.  So if you don’t have the mode enabled when you have found a
bug, tracing can’t give you any information (as tracing is disabled,
nothing has been recorded).

   While submitting bug reports, please include the whole output in the
trace output buffer.  This contains many crucial information required to
reproduce your bug.

   You can replay the terminal by executing the command
‘eat-trace-replay’ is the trace output buffer.  You can use the key ‘n’
or the key ‘<down>’ to show the next frame.  This is not intended for
ordinary users, it’s documented here only to help you debug Eat.  You
mustn’t rely on the behavior of this functionality to do anything else.


File: docQL52HQ.info,  Node: GNU General Public License,  Next: GNU Free Documentation License,  Prev: Tracing the Terminal,  Up: Top

Appendix A GNU General Public License
*************************************

                        Version 3, 29 June 2007

     Copyright © 2007 Free Software Foundation, Inc. <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program—to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers’ and authors’ protection, the GPL clearly explains
that there is no warranty for this free software.  For both users’ and
authors’ sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users’ freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     “This License” refers to version 3 of the GNU General Public
     License.

     “Copyright” also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     “The Program” refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as “you”.  “Licensees” and
     “recipients” may be individuals or organizations.

     To “modify” a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a “modified
     version” of the earlier work or a work “based on” the earlier work.

     A “covered work” means either the unmodified Program or a work
     based on the Program.

     To “propagate” a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To “convey” a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays “Appropriate Legal Notices”
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The “source code” for a work means the preferred form of the work
     for making modifications to it.  “Object code” means any non-source
     form of a work.

     A “Standard Interface” means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The “System Libraries” of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A “Major Component”, in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The “Corresponding Source” for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work’s System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users’ Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work’s users, your or third parties’ legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program’s source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to “keep intact all notices”.

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an “aggregate” if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation’s users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A “User Product” is either (1) a “consumer product”, which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     “normally used” refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     “Installation Information” for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     “Additional permissions” are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered “further
     restrictions” within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An “entity transaction” is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party’s predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A “contributor” is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor’s “contributor
     version”.

     A contributor’s “essential patent claims” are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, “control”
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor’s essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a “patent license” is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To “grant”
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  “Knowingly relying” means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient’s use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is “discriminatory” if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others’ Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM “AS IS”
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
“copyright” line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <https://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type ‘show w’.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type ‘show c’ for details.

   The hypothetical commands ‘show w’ and ‘show c’ should show the
appropriate parts of the General Public License.  Of course, your
program’s commands might be different; for a GUI interface, you would
use an “about box”.

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a “copyright disclaimer” for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <https://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <https://www.gnu.org/licenses/why-not-lgpl.html>.


File: docQL52HQ.info,  Node: GNU Free Documentation License,  Next: Index,  Prev: GNU General Public License,  Up: Top

Appendix B GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright © 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document “free” in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of “copyleft”, which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     “Document”, below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as “you”.  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A “Modified Version” of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A “Secondary Section” is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document’s overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The “Invariant Sections” are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The “Cover Texts” are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A “Transparent” copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     “Transparent” is called “Opaque”.

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The “Title Page” means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, “Title
     Page” means the text near the most prominent appearance of the
     work’s title, preceding the beginning of the body of the text.

     The “publisher” means any person or entity that distributes copies
     of the Document to the public.

     A section “Entitled XYZ” means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     “Acknowledgements”, “Dedications”, “Endorsements”, or “History”.)
     To “Preserve the Title” of such a section when you modify the
     Document means that it remains a section “Entitled XYZ” according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document’s license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document’s
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled “History”, Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled “History” in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          “History” section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled “Acknowledgements” or “Dedications”,
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled “Endorsements”.  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          “Endorsements” or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version’s
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled “Endorsements”, provided it contains
     nothing but endorsements of your Modified Version by various
     parties—for example, statements of peer review or that the text has
     been approved by an organization as the authoritative definition of
     a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     “History” in the various original documents, forming one section
     Entitled “History”; likewise combine any sections Entitled
     “Acknowledgements”, and any sections Entitled “Dedications”.  You
     must delete all sections Entitled “Endorsements.”

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an “aggregate” if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation’s users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document’s Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled “Acknowledgements”,
     “Dedications”, or “History”, the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <https://www.gnu.org/licenses/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License “or any later version” applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy’s public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     “Massive Multiauthor Collaboration Site” (or “MMC Site”) means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A “Massive Multiauthor Collaboration” (or “MMC”) contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     “CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     “Incorporate” means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is “eligible for relicensing” if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the “with...Texts.” line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: docQL52HQ.info,  Node: Index,  Prev: GNU Free Documentation License,  Up: Top

Appendix C Index
****************

 [index ]
* Menu:

* _eat_msg:                              Shell Integration.   (line  95)
* advertising colors:                    Colors.              (line  36)
* aliases, color:                        Colors.              (line  20)
* aliases, face:                         Colors.              (line  20)
* annotate, prompt:                      Shell Integration.   (line  46)
* annotate, shell prompt:                Shell Integration.   (line  47)
* annotation, prompt:                    Shell Integration.   (line  47)
* annotation, shell prompt:              Shell Integration.   (line  47)
* blinking cursor:                       Cursor Types.        (line   3)
* blinking text:                         Blinking Text.       (line   3)
* bold text:                             Fonts.               (line  10)
* bug reporting:                         Reporting Bugs.      (line   3)
* bugs in manual:                        Bugs in Manual.      (line   3)
* bugs, manual:                          Bugs in Manual.      (line   3)
* C-c C-c (“line mode”):                 Input Modes.         (line 108)
* C-c C-c (“semi-char mode”):            Input Modes.         (line  35)
* C-c C-e (“line mode”):                 Input Modes.         (line 117)
* C-c C-e (“semi-char mode”):            Input Modes.         (line  80)
* C-c C-j (“emacs mode”):                Input Modes.         (line  85)
* C-c C-j (“line mode”):                 Input Modes.         (line 117)
* C-c C-k (“emacs mode”):                Input Modes.         (line  82)
* C-c C-k (“semi-char mode”):            Input Modes.         (line  35)
* C-c C-l (“emacs mode”):                Input Modes.         (line  99)
* C-c C-l (“semi-char mode”):            Input Modes.         (line  99)
* C-c C-n (“emacs mode”):                Shell Integration.   (line  38)
* C-c C-n (“semi-char mode”):            Shell Integration.   (line  38)
* C-c C-p (“emacs mode”):                Shell Integration.   (line  38)
* C-c C-p (“semi-char mode”):            Shell Integration.   (line  38)
* C-c C-r (“line mode”):                 Input Modes.         (line 121)
* C-c M-d (“emacs mode”):                Input Modes.         (line  85)
* C-c M-d (“line mode”):                 Input Modes.         (line 117)
* C-c M-d (“semi-char mode”):            Input Modes.         (line  61)
* C-c M-r (“line mode”):                 Input Modes.         (line 121)
* C-c M-s (“line mode”):                 Input Modes.         (line 121)
* C-c <SPC> (“line mode”):               Input Modes.         (line 102)
* C-d (“line mode”):                     Input Modes.         (line 108)
* C-<down> (“line mode”):                Input Modes.         (line 121)
* C-M-m (“char mode”):                   Input Modes.         (line  70)
* C-q (“semi-char mode”):                Input Modes.         (line  27)
* C-<up> (“line mode”):                  Input Modes.         (line 121)
* C-x n d (“emacs mode”):                Shell Integration.   (line  43)
* C-x n d (“semi-char mode”):            Shell Integration.   (line  43)
* C-y (“semi-char mode”):                Clipboard.           (line   6)
* cause of flickering:                   Performance Tuning.  (line  19)
* changing cursor:                       Cursor Types.        (line   3)
* char mode:                             Input Modes.         (line  53)
* clipboard:                             Clipboard.           (line   3)
* clipboard integration:                 Clipboard.           (line  10)
* color advertisement:                   Colors.              (line  36)
* color aliases:                         Colors.              (line  20)
* colors:                                Colors.              (line   3)
* common problems:                       Common Problems.     (line   3)
* confirm before kill:                   Querying Before Kill.
                                                              (line   3)
* confirm before kill terminal:          Querying Before Kill.
                                                              (line   3)
* credential input:                      Password Input.      (line   3)
* cursor blinking:                       Cursor Types.        (line   3)
* cursor types:                          Cursor Types.        (line   3)
* customizing colors:                    Colors.              (line   3)
* customizing cursor:                    Cursor Types.        (line   3)
* customizing font families:             Fonts.               (line  24)
* customizing semi-char mode:            Input Modes.         (line  38)
* customizing semi-char mode keybindings: Input Modes.        (line  38)
* customizing semi-char mode keys:       Input Modes.         (line  38)
* cwd tracking:                          Shell Integration.   (line  22)
* directory tracking:                    Shell Integration.   (line  22)
* display:                               Display.             (line   3)
* eat:                                   Hello Terminal.      (line   6)
* eat not responding:                    Not Responding.      (line   3)
* eat signaled an error:                 Signaled an Error.   (line   3)
* eat, eshell:                           Eshell Terminal.     (line   3)
* eat-blink-mode:                        Blinking Text.       (line  15)
* eat-compile-terminfo:                  Not Recognized.      (line  24)
* eat-default-cursor-type:               Cursor Types.        (line  16)
* eat-default-cursor-type <1>:           Cursor Types.        (line  16)
* eat-enable-auto-line-mode:             Shell Integration.   (line 122)
* eat-enable-auto-line-mode <1>:         Shell Integration.   (line 122)
* eat-enable-blinking-text:              Blinking Text.       (line  10)
* eat-enable-blinking-text <1>:          Blinking Text.       (line  10)
* eat-enable-directory-tracking:         Shell Integration.   (line  31)
* eat-enable-directory-tracking <1>:     Shell Integration.   (line  31)
* eat-enable-kill-from-terminal:         Clipboard.           (line  17)
* eat-enable-kill-from-terminal <1>:     Clipboard.           (line  17)
* eat-enable-mouse:                      Mouse Tracking.      (line  10)
* eat-enable-mouse <1>:                  Mouse Tracking.      (line  10)
* eat-enable-shell-prompt-annotation:    Shell Integration.   (line  56)
* eat-enable-shell-prompt-annotation <1>: Shell Integration.  (line  56)
* eat-enable-yank-to-terminal:           Clipboard.           (line  26)
* eat-enable-yank-to-terminal <1>:       Clipboard.           (line  26)
* eat-eshell-fallback-if-stty-not-available: Input Invisible. (line  10)
* eat-eshell-mode:                       Eshell Terminal.     (line  11)
* eat-eshell-semi-char-non-bound-keys:   Input Modes.         (line  38)
* eat-eshell-update-semi-char-mode-map:  Input Modes.         (line  47)
* eat-fast-blink-frequency:              Blinking Text.       (line  38)
* eat-fast-blink-frequency <1>:          Blinking Text.       (line  38)
* eat-horizontal-bar-cursor-type:        Cursor Types.        (line  34)
* eat-horizontal-bar-cursor-type <1>:    Cursor Types.        (line  34)
* eat-input-chunk-size:                  Performance Tuning.  (line  14)
* eat-input-chunk-size <1>:              Performance Tuning.  (line  14)
* eat-invisible-cursor-type:             Cursor Types.        (line  19)
* eat-invisible-cursor-type <1>:         Cursor Types.        (line  19)
* eat-line-auto-move-to-input:           Input Modes.         (line 112)
* eat-line-input-history-isearch:        Input Modes.         (line 134)
* eat-line-input-history-isearch <1>:    Input Modes.         (line 134)
* eat-maximum-latency:                   Performance Tuning.  (line  64)
* eat-maximum-latency <1>:               Performance Tuning.  (line  64)
* eat-message-handler-alist:             Shell Integration.   (line 102)
* eat-message-handler-alist <1>:         Shell Integration.   (line 102)
* eat-minimum-latency:                   Performance Tuning.  (line  45)
* eat-minimum-latency <1>:               Performance Tuning.  (line  45)
* eat-narrow-to-shell-prompt:            Shell Integration.   (line  43)
* eat-next-shell-prompt:                 Shell Integration.   (line  38)
* eat-previous-shell-prompt:             Shell Integration.   (line  38)
* eat-project:                           Project-local Terminal.
                                                              (line   6)
* eat-query-before-killing-running-terminal: Querying Before Kill.
                                                              (line  12)
* eat-query-before-killing-running-terminal <1>: Querying Before Kill.
                                                              (line  12)
* eat-reload:                            Input Modes.         (line  47)
* eat-reset:                             Signaled an Error.   (line  12)
* eat-semi-char-non-bound-keys:          Input Modes.         (line  38)
* eat-send-command:                      Password Input.      (line  10)
* eat-shell-prompt-annotation-delay:     Performance Tuning.  (line  80)
* eat-shell-prompt-annotation-delay <1>: Performance Tuning.  (line  80)
* eat-shell-prompt-annotation-failure:   Shell Integration.   (line  69)
* eat-shell-prompt-annotation-failure-margin-indicator: Shell Integration.
                                                              (line  69)
* eat-shell-prompt-annotation-position:  Shell Integration.   (line  64)
* eat-shell-prompt-annotation-position <1>: Shell Integration.
                                                              (line  64)
* eat-shell-prompt-annotation-running:   Shell Integration.   (line  69)
* eat-shell-prompt-annotation-running-margin-indicator: Shell Integration.
                                                              (line  69)
* eat-shell-prompt-annotation-success:   Shell Integration.   (line  69)
* eat-shell-prompt-annotation-success-margin-indicator: Shell Integration.
                                                              (line  69)
* eat-sixel-aspect-ratio:                Sixel.               (line  17)
* eat-sixel-aspect-ratio <1>:            Sixel.               (line  17)
* eat-sixel-render-formats:              Sixel.               (line  27)
* eat-sixel-render-formats <1>:          Sixel.               (line  27)
* eat-sixel-scale:                       Sixel.               (line  13)
* eat-sixel-scale <1>:                   Sixel.               (line  13)
* eat-slow-blink-frequency:              Blinking Text.       (line  32)
* eat-slow-blink-frequency <1>:          Blinking Text.       (line  32)
* eat-term-bold:                         Fonts.               (line  10)
* eat-term-bold <1>:                     Fonts.               (line  13)
* eat-term-fast-blink:                   Blinking Text.       (line  23)
* eat-term-italic:                       Fonts.               (line  16)
* eat-term-name:                         Colors.              (line  48)
* eat-term-name <1>:                     Colors.              (line  48)
* eat-term-name <2>:                     Not Recognized.      (line   9)
* eat-term-scrollback-size:              Scrollback.          (line  17)
* eat-term-scrollback-size <1>:          Scrollback.          (line  17)
* eat-term-slow-blink:                   Blinking Text.       (line  23)
* eat-term-terminfo-directory:           Not Recognized.      (line  15)
* eat-trace-mode:                        Tracing the Terminal.
                                                              (line  10)
* eat-trace-replay:                      Tracing the Terminal.
                                                              (line  27)
* eat-update-semi-char-mode-map:         Input Modes.         (line  47)
* eat-vertical-bar-cursor-type:          Cursor Types.        (line  27)
* eat-vertical-bar-cursor-type <1>:      Cursor Types.        (line  27)
* eat-very-visible-cursor-type:          Cursor Types.        (line  22)
* eat-very-visible-cursor-type <1>:      Cursor Types.        (line  22)
* eat-very-visible-horizontal-bar-cursor-type: Cursor Types.  (line  37)
* eat-very-visible-horizontal-bar-cursor-type <1>: Cursor Types.
                                                              (line  37)
* eat-very-visible-vertical-bar-cursor-type: Cursor Types.    (line  30)
* eat-very-visible-vertical-bar-cursor-type <1>: Cursor Types.
                                                              (line  30)
* eat-yank:                              Clipboard.           (line   6)
* eat-yank-pop:                          Clipboard.           (line   6)
* emacs mode:                            Input Modes.         (line  73)
* emacs not responding:                  Not Responding.      (line   3)
* environment variable, TERM:            Colors.              (line  43)
* eshell:                                Eshell Terminal.     (line   3)
* eshell terminal:                       Eshell Terminal.     (line   3)
* eshell terminal emulation:             Eshell Terminal.     (line   3)
* eshell, eat:                           Eshell Terminal.     (line   3)
* face aliases:                          Colors.              (line  20)
* faint text:                            Fonts.               (line  13)
* fixing flickering:                     Performance Tuning.  (line  35)
* flickering:                            Performance Tuning.  (line  19)
* flickering fix:                        Performance Tuning.  (line  35)
* font family:                           Fonts.               (line  19)
* fonts:                                 Fonts.               (line   3)
* garbled text:                          Garbled Text.        (line   3)
* hello terminal:                        Hello Terminal.      (line   3)
* input invisible:                       Input Invisible.     (line   3)
* input mode, char:                      Input Modes.         (line  52)
* input mode, emacs:                     Input Modes.         (line  72)
* input mode, line:                      Input Modes.         (line  89)
* input mode, semi-char:                 Input Modes.         (line  18)
* input mode, semi-char, adding exceptions: Input Modes.      (line  38)
* input mode, semi-char, customizing:    Input Modes.         (line  38)
* input mode, semi-char, exception, add: Input Modes.         (line  38)
* input modes:                           Input Modes.         (line   3)
* input, credential:                     Password Input.      (line   3)
* input, invisible:                      Input Invisible.     (line   3)
* input, password:                       Password Input.      (line   3)
* inputting exceptional characters:      Input Modes.         (line  27)
* integration, shell:                    Shell Integration.   (line   3)
* integration, shell, line mode:         Shell Integration.   (line 113)
* introduction:                          Intro.               (line   3)
* invisible input:                       Input Invisible.     (line   3)
* invisible, input:                      Input Invisible.     (line   3)
* italic text:                           Fonts.               (line  16)
* keybinding mode, char:                 Input Modes.         (line  53)
* keybinding mode, emacs:                Input Modes.         (line  73)
* keybinding mode, line:                 Input Modes.         (line  90)
* keybinding mode, semi-char:            Input Modes.         (line  19)
* keybinding mode, semi-char, adding exceptions: Input Modes. (line  38)
* keybinding mode, semi-char, customizing: Input Modes.       (line  38)
* keybinding mode, semi-char, exception, add: Input Modes.    (line  38)
* keybinding modes:                      Input Modes.         (line   3)
* keybindings, char mode:                Input Modes.         (line  53)
* keybindings, emacs mode:               Input Modes.         (line  73)
* keybindings, line mode:                Input Modes.         (line  90)
* keybindings, semi-char mode:           Input Modes.         (line  19)
* keybindings, semi-char mode, adding exceptions: Input Modes.
                                                              (line  38)
* keybindings, semi-char mode, customizing: Input Modes.      (line  38)
* keybindings, semi-char mode, exception, add: Input Modes.   (line  38)
* keyboard:                              Keyboard.            (line   3)
* latency:                               Performance Tuning.  (line  35)
* line mode:                             Input Modes.         (line  90)
* line mode integration:                 Shell Integration.   (line 114)
* line mode shell integration:           Shell Integration.   (line 114)
* M-n (“line mode”):                     Input Modes.         (line 121)
* M-p (“line mode”):                     Input Modes.         (line 121)
* M-r (“line mode”):                     Input Modes.         (line 121)
* M-RET (“char mode”):                   Input Modes.         (line  70)
* M-y (“semi-char mode”):                Clipboard.           (line   6)
* manual, bugs:                          Bugs in Manual.      (line   3)
* manual, typos:                         Bugs in Manual.      (line   3)
* mode, char:                            Input Modes.         (line  53)
* mode, emacs:                           Input Modes.         (line  73)
* mode, line:                            Input Modes.         (line  90)
* mode, semi-char:                       Input Modes.         (line  19)
* mode, semi-char, adding exceptions:    Input Modes.         (line  38)
* mode, semi-char, customizing:          Input Modes.         (line  38)
* mode, semi-char, exception, add:       Input Modes.         (line  38)
* modes, input:                          Input Modes.         (line   3)
* modes, keybinding:                     Input Modes.         (line   3)
* mouse:                                 Mouse.               (line   3)
* mouse tracking:                        Mouse Tracking.      (line   3)
* narrow to prompt:                      Shell Integration.   (line  43)
* narrow to shell prompt:                Shell Integration.   (line  43)
* narrow, prompt:                        Shell Integration.   (line  43)
* narrow, shell prompt:                  Shell Integration.   (line  43)
* navigation, prompt:                    Shell Integration.   (line  34)
* not recognized:                        Not Recognized.      (line   3)
* not responding, eat:                   Not Responding.      (line   3)
* not responding, emacs:                 Not Responding.      (line   3)
* password input:                        Password Input.      (line   3)
* performance tuning:                    Performance Tuning.  (line   3)
* problem, common:                       Common Problems.     (line   3)
* problem, eat not responding:           Not Responding.      (line   3)
* problem, eat signaled an error:        Signaled an Error.   (line   3)
* problem, emacs not responding:         Not Responding.      (line   3)
* problem, garbled text:                 Garbled Text.        (line   3)
* problem, not recognized:               Not Recognized.      (line   3)
* problem, not responding, eat:          Not Responding.      (line   3)
* problem, not responding, emacs:        Not Responding.      (line   3)
* problem, reporting:                    Reporting Bugs.      (line   3)
* problem, signaled an error:            Signaled an Error.   (line   3)
* problem, terminal not recognized:      Not Recognized.      (line   3)
* problem, text garbled:                 Garbled Text.        (line   3)
* problems, bugs in manual:              Bugs in Manual.      (line   3)
* problems, bugs, manual:                Bugs in Manual.      (line   3)
* problems, manual, bugs:                Bugs in Manual.      (line   3)
* problems, manual, typos:               Bugs in Manual.      (line   3)
* problems, typos in manual:             Bugs in Manual.      (line   3)
* problems, typos, manual:               Bugs in Manual.      (line   3)
* project terminal:                      Project-local Terminal.
                                                              (line   3)
* project’s terminal:                    Project-local Terminal.
                                                              (line   3)
* project-local terminal:                Project-local Terminal.
                                                              (line   3)
* prompt annotation:                     Shell Integration.   (line  47)
* prompt navigation:                     Shell Integration.   (line  35)
* querying before kill:                  Querying Before Kill.
                                                              (line   3)
* querying before kill terminal:         Querying Before Kill.
                                                              (line   3)
* reason behind flickering:              Performance Tuning.  (line  19)
* reporting bugs:                        Reporting Bugs.      (line   3)
* <RET> (“line mode”):                   Input Modes.         (line 102)
* scrollback:                            Scrollback.          (line   3)
* semi-char mode:                        Input Modes.         (line  19)
* shell integration:                     Shell Integration.   (line   3)
* shell navigation, shell prompt:        Shell Integration.   (line  35)
* shell prompt annotation:               Shell Integration.   (line  47)
* shell prompt navigation:               Shell Integration.   (line  35)
* signaled an error:                     Signaled an Error.   (line   3)
* sixel:                                 Sixel.               (line   3)
* slant text:                            Fonts.               (line  16)
* <TAB> (“line mode”):                   Input Modes.         (line 121)
* TERM:                                  Colors.              (line  43)
* TERM environment variable:             Colors.              (line  43)
* terminal emulation, eshell:            Eshell Terminal.     (line   3)
* terminal not recognized:               Not Recognized.      (line   3)
* terminal recording:                    Tracing the Terminal.
                                                              (line   3)
* terminal tracing:                      Tracing the Terminal.
                                                              (line   3)
* terminal, eshell:                      Eshell Terminal.     (line   3)
* terminal, hello:                       Hello Terminal.      (line   3)
* terminal, kill, confirm:               Querying Before Kill.
                                                              (line   3)
* terminal, kill, query:                 Querying Before Kill.
                                                              (line   3)
* terminal, project:                     Project-local Terminal.
                                                              (line   3)
* terminal, project-local:               Project-local Terminal.
                                                              (line   3)
* text, blinking:                        Blinking Text.       (line   3)
* text, bold:                            Fonts.               (line  10)
* text, faint:                           Fonts.               (line  13)
* text, font family:                     Fonts.               (line  19)
* text, italic:                          Fonts.               (line  16)
* text, slant:                           Fonts.               (line  16)
* tracing the terminal:                  Tracing the Terminal.
                                                              (line   3)
* tracking cwd:                          Shell Integration.   (line  21)
* tracking directory:                    Shell Integration.   (line  22)
* tracking mouse:                        Mouse Tracking.      (line   3)
* tracking working directory:            Shell Integration.   (line  22)
* tuning performance:                    Performance Tuning.  (line   3)
* types, cursor:                         Cursor Types.        (line   3)
* typos in manual:                       Bugs in Manual.      (line   3)
* typos, manual:                         Bugs in Manual.      (line   3)
* window-adjust-process-window-size-function: Display.        (line  11)
* working directory tracking:            Shell Integration.   (line  22)
* yanking:                               Clipboard.           (line   6)



Tag Table:
Node: Top721
Node: Intro2983
Node: Hello Terminal3829
Node: Project-local Terminal4961
Node: Eshell Terminal5469
Node: Keyboard6664
Node: Mouse7662
Node: Input Modes8046
Ref: Semi-char Mode8745
Ref: Char Mode10496
Ref: Emacs Mode11342
Ref: Line Mode12018
Node: Password Input14724
Node: Shell Integration15433
Ref: Directory tracking16175
Ref: Shell Prompt Navigation16735
Ref: Shell Prompt Annotation17280
Ref: Message Passing19113
Ref: Line Mode Integration20412
Node: Querying Before Kill20852
Node: Display21853
Node: Scrollback22479
Node: Cursor Types23418
Node: Mouse Tracking25880
Node: Clipboard26429
Node: Colors27774
Node: Fonts30502
Node: Sixel31663
Node: Blinking Text33105
Node: Performance Tuning35117
Node: Common Problems39780
Node: Not Recognized40430
Node: Garbled Text42205
Node: Input Invisible43476
Node: Not Responding44196
Node: Signaled an Error44927
Node: Bugs in Manual45941
Node: Reporting Bugs46766
Node: Tracing the Terminal49486
Node: GNU General Public License50968
Node: GNU Free Documentation License88787
Node: Index114156

End Tag Table


Local Variables:
coding: utf-8
End:
