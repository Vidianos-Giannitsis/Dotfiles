#+TITLE: Literate Emacs Config
#+PROPERTY: header-args :tangle init.el
#+PROPERTY: header-args :results silent

* About this config

Welcome kind stranger, to my Emacs config. This is the heart of my dotfiles and of my entire computer workflow. Mostly everything I do in a computer with only a few excuses, stems from here and I absolutely love it. Emacs is the most extensible program I have ever seen. It allows you to change basically everything, until you have an environment which suits you perfectly. This is a vanilla GNU Emacs install with a ton of configurations. Actually its not even vanilla Emacs at this point, as its probably got more things than some emacs distros like doom, but it uses the tabula rasa that is vanilla emacs and customises it with this extremely long config file to make it into my own Emacs. Vanilla Emacs is all about creating a computer environment with consistency between all your tasks which is 100% customisable. I doubt there is a single thing in Emacs that can't be changed. And for that very reason I absolutely love it. Its truly the perfect workflow for me as I have handcrafted it from scratch. 

I have drawn inspiration from a lot of other init.el's but the most apparent one is the spacemacs keybindings. I was a spacemacs user for a few months before deciding to start using this personal config for Emacs. I found its keybindings very ergonomic and although most things arent exactly the way they are done in spacemacs, the inspiration is apparent. For example the Space and , keys are leader keys which I use a lot (space for general commands and , for mode specific, currently only org though).

Note that I am no elisp ninja and know just enough to write this config in a simple way, so some things are probably not done in the most efficient way possible, but everything I have set has its desired behaviour, which is enough for me.

I hope you will find something useful here that you can put to your emacs config as well. 

* Table of Contents                                                     :TOC:
- [[#about-this-config][About this config]]
- [[#packages][Packages]]
- [[#sensible-defaults][Sensible Defaults]]
- [[#evil-mode][Evil Mode]]
- [[#utilities][Utilities]]
- [[#keybindings][Keybindings]]
- [[#dired][Dired]]
- [[#useful-minor-modes][Useful Minor Modes]]
- [[#org-mode][Org-mode]]
  - [[#setting-up-external-packages-for-org][Setting up external packages for org]]
  - [[#org-mode-utilities][Org mode utilities]]
  - [[#latex-stuff][Latex Stuff]]
  - [[#org-noter][Org Noter]]
  - [[#org-babel][Org Babel]]
- [[#skeletons][Skeletons]]
- [[#org-roam-references-and-the-zettelkasten-workflow][Org Roam, References and the Zettelkasten Workflow]]
- [[#bookmarks][Bookmarks]]
- [[#emacs-scratchpad][Emacs Scratchpad]]
- [[#drawing-with-emacs][Drawing with Emacs]]
  - [[#inkscape][Inkscape]]
- [[#company][Company]]
- [[#elfeed---rss-feeds][Elfeed - RSS Feeds]]
- [[#scimax][Scimax]]
  - [[#exporting][Exporting]]
  - [[#abbreviations--spellchecking][Abbreviations & Spellchecking]]
  - [[#elfeed][Elfeed]]
- [[#ebib][Ebib]]
- [[#other-major-modes][Other Major Modes]]
  - [[#python][Python]]
  - [[#calc][Calc]]
  - [[#ebuku][Ebuku]]
  - [[#pdf-tools][PDF Tools]]
  - [[#emacs-application-framework][Emacs Application Framework]]
  - [[#elisp][Elisp]]
  - [[#deft][Deft]]
- [[#custom-variables][Custom Variables]]

* Packages
  :PROPERTIES:
  :TOC:      :include all
  :END:
Setting up my packages to work properly. 
The first section has to do with packages installed from melpa, the second with packages installed manually to my load path and the third about auto-updates to my packages which will be issued once a week.

#+BEGIN_SRC elisp :tangle init.el

  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			   ("elpa" . "https://elpa.gnu.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")))
  
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (let ((default-directory  "~/.emacs.d/libs/"))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    (auto-package-update-delete-old-versions t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "10:00"))

#+END_SRC


* Sensible Defaults
Change some Emacs defaults to things I consider more sensible for my use cases.
This includes: 
+ Activating gcmh mode, which helps improve my startup time (Note that to truly get a benefit from this it needs to be very early on in the config). 
+ Setting my theme to doom's variant of dracula. I initially didnt switch to dracula because Emacs' default dracula is not appealing to me, but after trying the doom variant I fell in love with it (you can get it from the doom-themes package).
+ Disabling some features which I dislike personally like the bars that comes by default, and the annoying sounds emacs makes when you type sth wrong.
+ Displaying battery on my modeline partly because its useful info, but practically because it just looks good
+ Activating which-key-mode, which is a popup prompt to display how to complete an emacs command.
+ Changing the startup screen to dired because I consider it way more productive than the default.
+ Activating ivy-mode my favourite emacs completion framework. I feel its really counter-productive to not use a completion framework such as Ivy/Helm/Ido. I also activate the all-the-icons integration for ivy. This is primarily for my switch-buffer command. I like icons
+ Changing the M-x menu to counsel M-x. With ivy-mode enabled you get an ivy M-x menu, but it doesn't have the keybinding associated with the action which I deem important. Thats why I set M-x to the counsel menu
+ Moving backup and autosave files to a tmp folder inside my .emacs.d so my directories look like less of a mess.
+ Changed my modeline to the doom-modeline. It looks better than the default modeline in Emacs imo
+ Changing yes-no prompts to y-n, because its simply easier to type than yes-no.
+ Hide elements such as asterisks when writing a bold word by default. In the [[*Utilities][Utilities]] section of the config, I also define a function which toggles this behaviour
+ Set my font to Source Code Pro with the right font size for me. To use daemon mode properly, this needs a bit more code.

#+BEGIN_SRC elisp :tangle init.el
  
  (gcmh-mode 1)
  
  (load-theme 'doom-palenight t)
  
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (setq ring-bell-function 'ignore)
  
  (display-battery-mode 1)
  
  (which-key-mode 1)
  
  (setq inhibit-startup-screen t)
  (add-hook 'after-init-hook 'dired-jump)
  
  (ivy-mode 1)
  (all-the-icons-ivy-setup)
  (global-set-key (kbd "M-x") #'counsel-M-x)
  (marginalia-mode 1)
  
  (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
  (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
  (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
	auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
  
  (require 'dash-functional)
  (require 'helpful)
  
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :config (setq doom-modeline-minor-modes nil
		  doom-modeline-enable-word-count t
		  doom-modeline-modal-icon t))
  
  (defalias 'yes-or-no-p 'y-or-n-p)
  
  (setq org-hide-emphasis-markers t)
  
  (defun set-font-faces ()
    "Needed to set up my fonts to work with the emacs daemon"
    (set-face-attribute 'default nil :font "Source Code Pro 14"))
  
  (if (daemonp)
      (add-hook 'after-make-frame-functions
		(lambda (frame)
		  (setq doom-modeline-icon t)
		  (with-selected-frame frame
		    (set-font-faces))))
    (set-font-faces))
  
  (setq default-input-method "greek")
#+END_SRC



* Evil Mode
Enabling Evil Mode, my preffered editing mode for Emacs, with the evil-collection loaded. It helps me with defining vim type keybindings for more programs, which I like. Then I also load evil-org which is a package for evil keys inside org as evil-collection doesn't have that. 

#+BEGIN_SRC elisp :tangle init.el
  
  (setq evil-collection-setup-minibuffer t)
  (setq evil-want-keybinding nil)
  (require 'evil-collection)
  (evil-collection-init)
  
  (require 'evil)
  (evil-mode 1)
  
  (require 'evil-org)
  (add-hook 'org-mode-hook 'evil-org-mode)
  (evil-org-set-key-theme '(navigation insert textobjects additional calendar))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys)
  
  #+END_SRC


* Utilities
General utilities that I want enabled when editing, or changes to the way emacs opens some programs.
This enables:
+ Enabling yasnippet snippets.
+ Enabling general, a package that helps me define keybindings easier.
+ Remove the warnings Emacs gives when opening large files or following vc controlled symlinks. I dont need them and they can be annoying.
+ Setting the spotify id which counsel needs to be able to control spotify through Emacs.
+ Loading small utility packages such as math at point (which makes doing calculations in Emacs faster) and molar-mass (a Molar mass calculator for Emacs)
+ Adding the dot to tab jump out delimiters. Sometimes you want to jump over a dot in a text and I like this besides jumping out of brackets
+ Loading mediator, a helpful package for dired which allows opening files with other programs. Its useful in some cases
+ Ace-window is a helpful package for switching focus between buffers really quickly. I set the keys used in it to be the home row keys instead of number keys as that is more convenient. I also activate a mode which shows which letter corresponds to each window in the mode line.
+ Load info+, a package that enhances info menus.
+ Load a simple wrapper around pdftotext so it can be easily integrated with emacs
+ Create a function to make changing my font size easier without the need to prompt for which font to use
+ Create a function to interactively name new vterm sessions from the minibuffer and open them in another window.
+ Making .m files open in octave-mode and .epub in nov-mode (as they should do). For Octave configurations also check init_octave.m inside this directory

#+BEGIN_SRC elisp :tangle init.el

  (add-to-list 'load-path
	       "~/.emacs.d/plugins/yasnippet")
  (require 'yasnippet)
  (yas-global-mode 1)

  (require 'general)
  (require 'vterm-toggle)

  (setq large-file-warning-threshold nil)
  (setq vc-follow-symlinks t)

  (setq counsel-spotify-client-id "0df2796a793b41dc91711eb9f85c0e77")
  (setq counsel-spotify-client-secret "bcdbb823795640248ff2c29eedadb800")
  (setq espotify-client-id "0df2796a793b41dc91711eb9f85c0e77")
  (setq espotify-client-secret "bcdbb823795640248ff2c29eedadb800")

  (require 'math-at-point)
  (require 'molar-mass)

  (setq-default tab-jump-out-delimiters '(";" ")" "]" "}" "|" "'" "\"" "`" "."))

  (require 'mediator)

  (ace-window-display-mode 1)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))

  (require 'info+)

  (require 'pdftotext)

  (defun set-font-size (SIZE)
    "Change font size of Emacs window according to SIZE. Font remains Source Code Pro."
    (interactive "MFont Size: ")
    (set-face-attribute 'default nil :font (concat "Source Code Pro " SIZE)))

  (defun named-vterm (NAME)
    "Create a new vterm session with name NAME and open it in a new window"
    (interactive "sEnter Name: ")
    (vterm-other-window NAME))

  (add-to-list 'auto-mode-alist '("\\.m\\'" . octave-mode))
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

  (setq org-confirm-elisp-link-function nil)

  (setq ivy-youtube-key "224520591375-p6v36u3r9k8qt2k7qthb12gnjarc8c7t")

  (defun emacs-run-launcher ()
    "Create and select a frame called emacs-run-launcher which consists only of a minibuffer and has specific dimensions. Run counsel-linux-app on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited"
    (interactive)
    (with-selected-frame (make-frame '((name . "emacs-run-launcher")
				       (minibuffer . only)
				       (width . 120)
				       (height . 11)))
      (unwind-protect
	  (counsel-linux-app)
	(delete-frame))))

#+END_SRC

* Keybindings
  This is my absolute favourite section of this entire config. But its a very big part of my config and I considered it more prudent to include it as its own file. You can find [[https://github.com/AuroraDragoon/Dotfiles/blob/master/emacs/.emacs.d/libs/keybindings.org][keybindings.org]] inside the libs directory (which contains all the external elisp "libraries" I have installed manually). The org file is the literate configuration of my keybindings. In that directory you will also find the keybindings.el file which I require in this section of the config to load. It acts as if it was an external package for Emacs which helps make this config more tidy. 

  #+BEGIN_SRC elisp :tangle init.el

    (require 'keybindings)

  #+END_SRC
  
** COMMENT For my own convenience, a link to the keybindings.org file
   The link above points to keybindings.org in git. For my convenience, while editing this file I want a clickable link to my keybindings file, outside of the command I have for it. [[~/.emacs.d/libs/keybindings.org]]
   
* Dired
  Dired is Emacs's built in file manager. As dired is my Emacs startup screen as mentioned before, I have some customisations for it to make it look neat.
  I have configured it to include:
  + Icons alongside each file which represent what type of file it is.
  + Hiding dotfiles by default (The keychord SPC d h, will show all the dotfiles in the directory but I find hiding them better for initial behaviour).
  + Added the functionality of when a folder has a single item, directly go to that item (open if its file, display the directory if its a directory). This is how you vieew folders in github, which behaviour I really like it so since I found a package with this behaviour (dired-collapse) I added it to my config and hooked it to dired mode.
  + Require helm-dired-open, a small package to prompt for opening files outside of Emacs. 

  #+BEGIN_SRC elisp :tangle init.el
     (require 'dired-x)
    
    ;(add-hook 'dired-mode-hook 'treemacs-icons-dired-mode)
    
    (use-package all-the-icons-dired
      :hook (dired-mode . all-the-icons-dired-mode)
      :config (setq all-the-icons-dired-monochrome nil))
    
    (use-package dired-hide-dotfile
      :hook (dired-mode . dired-hide-dotfiles-mode))
    
    (use-package dired-collapse
      :hook (dired-mode . dired-collapse-mode))
    
    (require 'helm-dired-open)
  #+END_SRC


  This is how Dired ends up looking after these changes
  [[https://github.com/AuroraDragoon/Dotfiles/blob/master/screenshots/dired.png]]

* Useful Minor Modes
  I enable a lot of minor modes on startup and I also set some up for use. This section documents these modes. Which-key and Ivy are omitted from this section as they fit more in the [[*Sensible Defaults][Sensible Defaults]] section because every sensible person would enable which key and a completion framework such as Ivy for better Emacs usage.
+ When adding a bracket or quote add its pair as well for quicker editing.
+ When the cursor is on one bracket, highlight its matching bracket.
+ Setting my wolfram alpha ID for use in emacs which allows me to query the website from inside Emacs
+ Activating undo-tree-mode everywhere.
+ Calfw is a calendar app for Emacs. Calfw-git allows you to see your git commit history inside of calfw while calfw-org shows org-todos in a calendar interface.
+ Audio files, obscure image files and MS/Libre Office documents don't open properly inside Emacs. I set up openwith to open them with external files.
+ Loading projectile, to remind me to play around with it some day.
+ Make the default flyspell dictionary greek and run flyspell on the whole buffer when flyspell mode is activated. I find spellchecking software to be very annoying and intrusive in my typical writing workflow so I dont want this to activate when I enter text buffers. Rather, I want to be able to run this once, when I am done with the writing and fix any errors at that point. This does just that
+ Winner mode is a mode for navigating through buffer history
  
  #+BEGIN_SRC elisp :tangle init.el
    
    (show-paren-mode 1)
    (electric-pair-mode 1)
    (setq wolfram-alpha-app-id "U9PERG-KTPL49AWA2")
    (global-undo-tree-mode 1)
    
    (require 'calfw-git)
    (require 'calfw-org)
    
    (use-package openwith
      :config
      (setq openwith-associations
	    (list
	     (list (openwith-make-extension-regexp
		    '("mpg" "mpeg" "mp3" "mp4"
		      "avi" "wmv" "wav" "mov" "flv"
		      "ogm" "ogg" "mkv"))
		    "mpv"
		    '(file))
	     (list (openwith-make-extension-regexp
		    '("xbm" "pbm" "pgm" "ppm" "pnm"
		      "gif" "bmp" "tif"))
		   "sxiv"
		   '(file))
	     (list (openwith-make-extension-regexp
		    '("mph"))
		   "comsol"
		   '(file))
	     (list (openwith-make-extension-regexp
		    '("aup"))
		   "audacity"
		   '(file))
	     (list (openwith-make-extension-regexp
		    '("docx" "doc" "xlsx" "xls" "ppt" "odt" "ods"))
		   "libreoffice"
		   '(file))))
	    (openwith-mode 1))
    
    (use-package projectile
      :ensure t
      :init
      (projectile-mode +1)
      :bind (:map projectile-mode-map
		  ("M-p" . projectile-command-map)))
    
    (setq flyspell-default-dictionary "greek")
    
    (winner-mode 1)
  #+END_SRC

  
* Org-mode
Some settings (now using the word some here might be an underestimation, as with the keybindings in a seperate file this is about half my config, but I like Org) I want for Emacs's Org-mode which I use extensively (like for writing this literate config file). Its split in sections cause its too huge otherwise. 

** Setting up external packages for org
   This first section is about some packages I load for org, which are very helpful for my workflow, such as:
   + Better headings for org, as I am not a fan of the default asterisks.
   + I load org-download after org, this is a helpful addon which allows me to paste photos on my clipboard to org, which makes adding photos to org documents much faster.
   + I add org-tree-slide for presentations inside Org
   + Require the org export beamer, hugo and pandoc packages so their export options are there by default
   + Require org-marginalia
     
#+BEGIN_SRC elisp :tangle init.el
  
    (add-hook 'org-mode-hook #'(lambda ()
				 (org-superstar-mode)
				 (org-superstar-configure-like-org-bullets)))
  
  (use-package org-download
    :after org)
  
  (require 'org-tree-slide)
  
  (require 'ox-beamer)
  (require 'ox-hugo)
  (require 'ox-pandoc)
  
  (require 'org-marginalia-global-tracking)
  (require 'org-marginalia)
  
  (require 'org-pandoc-import)
  
#+END_SRC


** Org mode utilities
   I change some more things inside org to fix some annoying default behaviours.
   + When exporting to pdf, org defaults to your system's default pdf viewer. Since I am in an Emacs buffer editing the file, its more convenient to open the pdf inside Emacs with pdf-tools.
   + I tell org that its odt export should be converted to docx as if I am exporting to a rich text editors format, its for a collaboration and most people I know use that format. If its a personal project I always export to a latex pdf because it looks better.
   + Defining a function which supresses the confirmation message for tangling an org document's source code and hooking it to the after save hook in org-mode. If I understand it correctly, it should automatically tangle after saving, if thats possible, which is handy for things such as this configuration.
   + I activate image preview by default inside org, as images are cool, I like images. I also change the "org-image-actual-width" variable, which makes images previewd in org to be able to change size if given the right headers. This is helpful for some images which are too large to be properly viewed in org so they can be scaled down and be properly visible.
   + Activate visual line mode, as its really useful to have imo.
   + Changing the heading and title font to match my global font and resizing them so 1st tier headings and titles actually stand out like they should.
   + A function to toggle the behaviour of markup elements such as visible asterisks when writing a message in bold. I dont like seeing them usually, but its good to have a function which toggle this behaviour
   + When exporting, I want the export to work regardless of if the links work or not. If I am exporting a link heavy file (such as something from my Zettelkasten) I want it to export even if the links will not work.

 
#+BEGIN_SRC elisp :tangle init.el
  (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs))
  
  (setq org-odt-preferred-output-format "docx")
  
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'(lambda ()
								     (let ((org-confirm-babel-evaluate nil))
								       (org-babel-tangle))))
						'run-at-end 'only-in-org-mode))
  
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width nil)
  
  (add-hook 'org-mode-hook 'visual-line-mode)
  
  (set-face-attribute 'org-document-title nil :font "Source Code Pro" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.2)
		  (org-level-2 . 1.1)
		  (org-level-3 . 1.05)
		  (org-level-4 . 1.0)
		  (org-level-5 . 1.1)
		  (org-level-6 . 1.1)
		  (org-level-7 . 1.1)
		  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Source Code Pro" :weight 'regular :height (cdr face)))
  
  (defun org-toggle-emphasis ()
    "Toggle hiding/showing of org emphasize markers."
    (interactive)
    (if org-hide-emphasis-markers
	(set-variable 'org-hide-emphasis-markers nil)
      (set-variable 'org-hide-emphasis-markers t)))
  
  (setq org-export-with-broken-links t)
  
#+END_SRC

** Latex Stuff
   I love Latex for writing mathematical equations. Org understands latex very well and can preview it. But I want some things changed in it. 
    + I write a lot of equations in my documents usually with latex and the normal size of those inside org (available with org-latex-preview) is a bit small for my liking so after playing around with it a bit I scaled it up to 1.8 of the original which I consider a very sensible size
    + Making latex view my bibtex bibliography and export it properly. I took this from the org-ref docs as originally I wasnt getting proper bibliographic entries. It works with this.
    + I make the default process for creating latex previews dvisvgm. For the most part, both this and dvipng work flawlessly. But one specific latex package (chemfig) which I use from time to time cant preview things correctly in org with dvipng and previewing them as svgs with dvisvgm fixes that issue. Besides that, I havent really noticed any other major problems with either one.
    + I tell org to preview latex fragments by default when opening a document, as I use them extensively so this makes my life easier.
    + I activate calctex and activate it when I go into calc's embedded mode. Its a neat package that allows me to type a formula inside calc and renders it automatically into latex. Latex snippets are what I use mostly but this is a very neat package and I had to include it here.
    + I activate org-cdlatex-mode which makes typing latex equations easier inside org and massively improves speed of typing equations together with snippets for org, org-fragtog mode which automatically creates previews for latex fragments when the cursor is not on them and laas mode which is a bunch of helpful latex snippets which autocomplete.
    + I tell latex to export my code blocks using the minted package so they look better
    + I add some packages I use in all my documents in org-latex-packages-alist. 
    + The next few were taken by John Kitchin's [[https://kitchingroup.cheme.cmu.edu/blog/2016/11/07/Better-equation-numbering-in-LaTeX-fragments-in-org-mode/][website]]. Its about equations in org not being properly numbered as the org latex preview takes them as independent fragments and not as a whole. This code snippet, makes org number equations properly using an advice on org-create-formula-image. Its very neat and I am glad to have found it.
    + Lastly, I redefine the laas basic snippets as there are some useful symbols not included (such as laplace transformation) or some others which I dont like the letter they are bound to. A lot of the snippets included are for adding greek letters to text. I have a greek keyboard, so to me these are useless and I replaced some of them with these symbols. I left the rest of them the same, as I dont really care about them.

   #+BEGIN_SRC elisp :tangle init.el
     (setq org-format-latex-options '(:foreground default :background default :scale 1.8 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers))

     (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))

     (setq org-preview-latex-default-process 'dvisvgm)

     (setq org-startup-with-latex-preview t)

     (require 'calctex)
     (add-hook 'calc-embedded-new-formula-hook 'calctex-mode)

     (add-hook 'org-mode-hook '(lambda ()
				 (turn-on-org-cdlatex)
				 (org-fragtog-mode)
				 (laas-mode)))

     (setq org-latex-listings 'minted)

     (setq org-latex-packages-alist '(("" "booktabs")
				      ("" "import")
				      ("LGR, T1" "fontenc")
				      ("greek, english" "babel")
				      ("" "alphabeta")
				      ("" "esint")
				      ("" "mathtools")
				      ("" "esdiff")
				      ("" "makeidx")
				      ("" "glossaries")
				      ("" "newfloat")
				      ("" "minted")))

     (defun org-renumber-environment (orig-func &rest args)
       (let ((results '()) 
	     (counter -1)
	     (numberp))

	 (setq results (loop for (begin .  env) in 
			     (org-element-map (org-element-parse-buffer) 'latex-environment
			       (lambda (env)
				 (cons
				  (org-element-property :begin env)
				  (org-element-property :value env))))
			     collect
			     (cond
			      ((and (string-match "\\\\begin{equation}" env)
				    (not (string-match "\\\\tag{" env)))
			       (incf counter)
			       (cons begin counter))
			      ((string-match "\\\\begin{align}" env)
			       (prog2
				   (incf counter)
				   (cons begin counter)                          
				 (with-temp-buffer
				   (insert env)
				   (goto-char (point-min))
				   ;; \\ is used for a new line. Each one leads to a number
				   (incf counter (count-matches "\\\\$"))
				   ;; unless there are nonumbers.
				   (goto-char (point-min))
				   (decf counter (count-matches "\\nonumber")))))
			      (t
			       (cons begin nil)))))

	 (when (setq numberp (cdr (assoc (point) results)))
	   (setf (car args)
		 (concat
		  (format "\\setcounter{equation}{%s}\n" numberp)
		  (car args)))))

       (apply orig-func args))

     (advice-add 'org-create-formula-image :around #'org-renumber-environment)

     (setq laas-basic-snippets
       '(:cond laas-mathp
	 "!="    "\\neq"
	 "!>"    "\\mapsto"
	 "**"    "\\cdot"
	 "+-"    "\\pm"
	 "-+"    "\\mp"
	 "->"    "\\to"
	 "..."   "\\dots"
	 "<<"    "\\ll"
	 "<="    "\\leq"
	 "<>"    "\\diamond"
	 "=<"    "\\impliedby"
	 "=="    "&="
	 "=>"    "\\implies"
	 ">="    "\\geq"
	 ">>"    "\\gg"
	 "AA"    "\\forall"
	 "EE"    "\\exists"
	 "cb"    "^3"
	 "iff"   "\\iff"
	 "inn"   "\\in"
	 "notin" "\\not\\in"
	 "sr"    "^2"
	 "xx"    "\\times"
	 "|->"   "\\mapsto"
	 "|="    "\\models"
	 "||"    "\\mid"
	 "~="    "\\approx"
	 "~~"    "\\sim"

	 "arccos" "\\arccos"
	 "arccot" "\\arccot"
	 "arccot" "\\arccot"
	 "arccsc" "\\arccsc"
	 "arcsec" "\\arcsec"
	 "arcsin" "\\arcsin"
	 "arctan" "\\arctan"
	 "cos"    "\\cos"
	 "cot"    "\\cot"
	 "csc"    "\\csc"
	 "exp"    "\\exp"
	 "ln"     "\\ln"
	 "log"    "\\log"
	 "perp"   "\\perp"
	 "sin"    "\\sin"
	 "star"   "\\star"
	 "gcd"    "\\gcd"
	 "min"    "\\min"
	 "max"    "\\max"

	 "CC" "\\CC"
	 "FF" "\\FF"
	 "HH" "\\HH"
	 "NN" "\\NN"
	 "PP" "\\PP"
	 "QQ" "\\QQ"
	 "RR" "\\RR"
	 "ZZ" "\\ZZ"

	 ";a"  "\\alpha"
	 ";A"  "\\forall"        ";;A" "\\aleph"
	 ";b"  "\\beta"
	 ";C"  "\\mathbb{C}"                            ";;;C" "\\arccos"
	 ";d"  "\\dot"         ";;d" "\\partial"
	 ";D"  "\\Delta"         ";;D" "\\nabla"
	 ";e"  "\\mathcal{E}"       ";;e" "\\varepsilon"   ";;;e" "\\exp"
	 ";E"  "\\exists"                               ";;;E" "\\ln"
	 ";f"  "\\phi"           ";;f" "\\varphi"
	 ";F"  "\\Phi"
	 ";g"  "\\gamma"                                ";;;g" "\\lg"
	 ";G"  "\\Gamma"                                ";;;G" "10^{?}"
	 ";h"  "\\eta"           ";;h" "\\hbar"
	 ";i"  "\\infty"            ";;i" "\\imath"
	 ";I"  "\\in"          ";;I" "\\Im"
	 ";;j" "\\jmath"
	 ";k"  "\\kappa"
	 ";l"  "\\mathcal{L}"        ";;l" "\\ell"          ";;;l" "\\log"
	 ";L"  "\\Lambda"
	 ";m"  "\\mu"
	 ";n"  "\\nabla"         ";;n" "\\vec{\\nabla}"     ";;;n" "\\ln"
	 ";N"  "\\mathbb{N}"                                ";;;N" "\\exp"
	 ";o"  "\\omega"
	 ";O"  "\\Omega"         ";;O" "\\mho"
	 ";p"  "\\partial"            ";;p" "\\varpi"
	 ";P"  "\\Pi"
	 ";q"  "\\theta"         ";;q" "\\vartheta"
	 ";Q"  "\\mathbb{Q}"
	 ";r"  "\\rho"           ";;r" "\\varrho"
	 ";R"  "\\mathbb{R}"      ";;R" "\\Re"
	 ";s"  "\\sqrt"         ";;s" "\\varsigma"    ";;;s" "\\sin"
	 ";S"  "\\Sigma"                               ";;;S" "\\arcsin"
	 ";t"  "\\tau"                                 ";;;t" "\\tan"
	 ";;;T" "\\arctan"
	 ";u"  "\\upsilon"
	 ";U"  "\\Upsilon"
	 ";v"  "\\vec"
	 ";V"  "\\Phi"
	 ";w"  "\\xi"
	 ";W"  "\\Xi"
	 ";x"  "\\chi"
	 ";y"  "\\psi"
	 ";Y"  "\\Psi"
	 ";z"  "\\zeta"
	 ";Z"  "\\mathbb{Z}"
	 ";0"  "\\emptyset"
	 ";8"  "\\infty"
	 ";!"  "\\neg"
	 ";^"  "\\uparrow"
	 ";&"  "\\wedge"
	 ";~"  "\\approx"        ";;~" "\\simeq"
	 ";_"  "\\downarrow"
	 ";+"  "\\cup"
	 ";-"  "\\leftrightarrow"";;-" "\\longleftrightarrow"
	 ";*"  "\\times"
	 ";/"  "\\not"
	 ";|"  "\\mapsto"        ";;|" "\\longmapsto"
	 ";\\" "\\setminus"
	 ";="  "\\Leftrightarrow"";;=" "\\Longleftrightarrow"
	 ";(" "\\langle"
	 ";)" "\\rangle"
	 ";[" "\\Leftarrow"     ";;[" "\\Longleftarrow"
	 ";]" "\\Rightarrow"    ";;]" "\\Longrightarrow"
	 ";{"  "\\subset"
	 ";}"  "\\supset"
	 ";<"  "\\leftarrow"    ";;<" "\\longleftarrow"  ";;;<" "\\min"
	 ";>"  "\\rightarrow"   ";;>" "\\longrightarrow" ";;;>" "\\max"
	 ";'"  "\\prime"
	 ";."  "\\cdot"))
   #+END_SRC

   
** Org Noter
   
   Org-noter is an excellent program for annotating pdfs using org. Its main problem is that when you open it it creates its frame in a new emacs window which for me is inconvenient, so I change that behaviour to open the notes the current buffer. I also make another change. Because the typical file that includes a lot of org-noter annotations is crammed with :PROPERTIES: arguments I use a custom function to hide them. They can be useful so I dont hide them by default, but instead make the function interactive (can be called from M-x) and when given the 'all argument on the prompt hides all the :PROPERTIES: arguments. Below is the source code for these changes. Also, since I am not the one who wrote the function have a link to the stack-overflow page where this is answered [[https://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode]]

   #+BEGIN_SRC elisp :tangle init.el

     (setq org-noter-always-create-frame nil)

     (defun org-cycle-hide-drawers (state)
       "Hide all the :PROPERTIES: drawers when called with the 'all argument. Mainly for hiding them in crammed org-noter files"
       (interactive "MEnter 'all for hiding :PROPERTIES: drawers in an org buffer: ")
       (when (and (derived-mode-p 'org-mode)
		  (not (memq state '(overview folded contents))))
	 (save-excursion
	   (let* ((globalp (memq state '(contents all)))
		  (beg (if globalp
			 (point-min)
			 (point)))
		  (end (if globalp
			 (point-max)
			 (if (eq state 'children)
			   (save-excursion
			     (outline-next-heading)
			     (point))
			   (org-end-of-subtree t)))))
	     (goto-char beg)
	     (while (re-search-forward org-drawer-regexp end t)
	       (save-excursion
		 (beginning-of-line 1)
		 (when (looking-at org-drawer-regexp)
		   (let* ((start (1- (match-beginning 0)))
			  (limit
			    (save-excursion
			      (outline-next-heading)
				(point)))
			  (msg (format
				 (concat
				   "org-cycle-hide-drawers:  "
				   "`:END:`"
				   " line missing at position %s")
				 (1+ start))))
		     (if (re-search-forward "^[ \t]*:END:" limit t)
		       (outline-flag-region start (point-at-eol) t)
		       (user-error msg))))))))))

   #+END_SRC


** Org Babel
More languages to evaluate with org-babel (by default, only elisp is evaluated). I dont use this extensively but for those times that I need to evaluate code in org, its probably going to be in one of these so might as well add them.

#+BEGIN_SRC elisp :tangle init.el
  
  (org-babel-do-load-languages
     'org-babel-load-languages
     '(
       (python . t)
       (haskell . t)
       (octave . t)
       (latex . t)
       (gnuplot . t)
  )
     )
  
#+END_SRC


* Skeletons
  Skeletons are a very neat feature of Emacs. Think of a snippet and a template, now combine them and you have a skeleton. A skeleton is bound to a key which when pressed enters a piece of text. This is helpful when initialising a file whose format is certain. I currently use this for initialising my lab reports which have a rather standard format all the time.

#+BEGIN_SRC elisp :tangle init.el

  (define-skeleton lab-skeleton
    "A skeleton which I use for initialising my lab reports which have standard formatting"
    ""
    "#+TITLE:"str"\n"
    "glatex"-"\n"
    "ab\n\\pagebreak\n\n"

    "* Εισαγωγή\n\n"

    "* Πειραματικό Μέρος\n\n"

    "* Αποτελέσματα - Συζήτηση\n\n"

    "* Συμπεράσματα\n\n"

    "* Βιβλιογραφία\n"
    "bibliography:~/Sync/My_Library.bib\n"
    "bibliographystyle:unsrt")

  (define-skeleton uo-lab-skeleton
    "My lab on unit operations has a really specific template which albeit similar is not identical to the typical structure of a lab report. This is a skeleton initialising those lab reports"
    ""
    "#+TITLE:"str"\n"
    "glatex"-"\n"
    "#+LATEX_HEADER: \\usepackage[a4paper, margin=2cm]{geometry}\n"
    "#+LATEX_CLASS_OPTIONS: [9pt]\n"
    "#+OPTIONS: toc:nil\n"
    "#+AUTHOR: \n"
    "#+DATE: Εκτέλεση: , Παράδοση: \n\n"
    "ab\n\\pagebreak\n\\tableofcontents\n\n"

    "* Εισαγωγή\n\n"

    "* Πειραματικό Μέρος\n\n"
    "** Πειραματική Διάταξη - Διάγραμμα Ροής\n\n"
    "** Πειραματική Διαδικασία\n\n"
    "** Μετρήσεις\n\n"

    "* Επεξεργασία Μετρήσεων\n\n"

    "* Συζήτηση Αποτελεσμάτων - Συμπεράσματα\n\n"

    "* Βιβλιογραφία\n"
    "bibliography:~/Sync/My_Library.bib\n"
    "bibliographystyle:unsrt")

  (define-skeleton hw-skeleton
    "A skeleton for quickly adding a list of this semester's lessons to a new note which I use for tracking what I need to do for each lesson"
    ""
    "*** ΜΦΔ\n\n"
    "*** Φαινόμενα Μεταφοράς\n\n"
    "*** ΗΕΔ (Υδραυλικό)\n\n"
    "*** ΗΕΔ (Ηλεκτρικό)\n\n"
    "*** Υλικά\n\n"
    "*** Προηγμένα Κεραμικά\n\n"
    "*** Βιολογία\n\n")

  #+END_SRC

 
* Org Roam, References and the Zettelkasten Workflow 
  This is one of the largest and most important sections of my entire config. It is about org roam, the various reference management packages and the whole overarching workflow. It is really large so I decided to split it into its own file, [[https://github.com/Vidianos-Giannitsis/Dotfiles/blob/master/emacs/.emacs.d/libs/zettelkasten.org][zettelkasten.org]] (which can be found in the libs directory). One section of it, I envision to publish as a seperate library, so it tangles to a different file called zetteldesk.el. So here, I require both. 

#+BEGIN_SRC elisp :tangle init.el

  (require 'zettelkasten)
  (require 'zetteldesk)

#+END_SRC
  
* Bookmarks
  I want to explore the bookmark system in emacs more. I enable version control for bookmarks and auto deletion of old ones as well as activate bookmark+, a set of libraries which make useful additions to the vanilla bookmarks

#+BEGIN_SRC elisp :tangle init.el
  
  (setq bookmark-version-control t
	delete-old-versions t)
  
#+END_SRC


* Emacs Scratchpad
  Ever wanted to write some text somewhere besides Emacs and got annoyed because you want your snippets and in general your emacs customisations in that text interface without needing to jump to Emacs. The emacs scratchpad solves this issue. This is the part of the setup needed in my init.el, while the rest of the project lies in my qtile's config.py . If you are interested on the topic, you can check [[https://github.com/Vidianos-Giannitsis/Dotfiles/blob/master/Emacs_Scratchpad.org][this]] file for more details.

  The Emacs part is basically just a function which allows me to copy all the text in a buffer, then delete it and save the buffer. As such, I can open the scratchpad instance of Emacs on an empty file, write something, and then easily cut it from the document to paste it in the other interface. For ease of use I considered it easier to "bind" this command to a snippet rather than a keybinding. As such, pressing "done" and expanding with yasnippet will run the org-scratchpad command. The other command in this block suppreses a warning that triggers when this command is expanded from a snippet. I know very well what I am doing to the buffer and I dont need a warning for it. 
  
  #+BEGIN_SRC elisp :tangle init.el

    (defun org-scratchpad ()
      "Yank the entire document, delete it and save the buffer. This is very useful for my scratchpad setup"
      (interactive)
      (evil-yank-characters (point-min) (point-max))
      (delete-region (point-min) (point-max))
      (save-buffer))

    (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

  #+END_SRC

  
* Drawing with Emacs
  
** Inkscape
  This section is about integration of Emacs' org-mode with Inkscape. Essentially the first function, opens Inkscape, lets you draw whatever you desire and then creates a latex code area with the figure, ready to be imported. But, since saved the file as a .svg we need the second function, which exports the .svg to pdf so it can be imported properly to the Latex document Org exports.

  In a nutshell, you can use Inkscape to seamlessly create good looking graphs/shapes inside your org documents, which can prove very useful in some cases. I take no credit for this. I "stole" the idea from [[https://www.reddit.com/r/emacs/comments/lo9ov0/latex_export_with_inkscape_images_and_drawio/][this]] excellent reddit post. I recommend you check that post out and not this section. The only problem I had with it is that the author initially planned for the second function to not be interactive but simply hooked to the org-export-before-processing-hook. This should work, but for some reason (at least in my config) this hook simply doesn't exist on startup creating an error while loading my init.el. After testing I noticed that if you export a file once in an emacs session, the hook is created and this works perfectly. But since I can't get it on startup and its tedious to do otherwise, I just made the function interactive so I can call it from the M-x menu and from a custom keybinding. If you however don't have this issue, the fix (as can be seen in the reddit post, which I recommend at least checking out) is removing the (interactive) (which isn't mandatory, but you wont need to call the function if its hooked to the correct hook) and adding a variable arg as the function's argument (this is needed for the hook to call the function correctly, but isn't needed if the function is called interactively).

  Big thanks to u/ozzopp on reddit for providing the source code for this as its truly amazing but something I couldn't have made on my own. 
  
  #+BEGIN_SRC elisp :tangle init.el

    (defun org-inkscape-img ()
	(interactive "P")
	(setq string (read-from-minibuffer "Insert image name: "))
	;; if images folder doesn't exist create it
	(setq dirname (concat (f-base (buffer-file-name)) "-org-img"))
	(if (not (file-directory-p dirname))
	    (make-directory dirname))
	 ;; if file doesn't exist create it
	 (if (not (file-exists-p (concat "./" dirname "/" string ".svg")))
	 (progn
	     (setq command (concat "echo " "'<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><svg xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:cc=\"http://creativecommons.org/ns#\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" width=\"230mm\" height=\"110mm\" viewBox=\"0 0 164.13576 65.105995\" version=\"1.1\" id=\"svg8\" inkscape:version=\"1.0.2 (e86c8708, 2021-01-15)\" sodipodi:docname=\"disegno.svg\"> <defs id=\"defs2\" /> <sodipodi:namedview id=\"base\" pagecolor=\"#292d3e\" bordercolor=\"#666666\" borderopacity=\"1.0\" inkscape:zoom=\"1.2541194\" inkscape:cx=\"310.17781\" inkscape:cy=\"123.03495\"z inkscape:window-width=\"1440\" inkscape:window-height=\"847\" inkscape:window-x=\"1665\" inkscape:window-y=\"131\" inkscape:window-maximized=\"1\"  inkscape:current-layer=\"svg8\" /><g/></svg>' >> " dirname "/" string ".svg; inkscape " dirname "/" string ".svg"))
		(shell-command command)
		(concat "#+begin_export latex\n\\begin{figure}\n\\centering\n\\def\\svgwidth{0.9\\columnwidth}\n\\import{" "./" dirname "/}{" string ".pdf_tex" "}\n\\end{figure}\n#+end_export"))
	    ;; if file exists opens it
	    (progn
		(setq command (concat "inkscape " dirname "/" string ".svg"))
		(shell-command command)
		(concat "" ""))))

    (add-to-list 'org-latex-packages-alist '("" "booktabs"))
    (add-to-list 'org-latex-packages-alist '("" "import"))

    (defun org-svg-pdf-export ()
      (interactive)
      (setq dirname (concat (f-base (buffer-file-name)) "-org-img"))
      (if (file-directory-p dirname)
	  (progn
	    (setq command (concat "/usr/bin/inkscape -D --export-latex --export-type=\"pdf\" " dirname "/" "*.svg"))
	    (shell-command command))))

    (defun svglatex (file_name)
      "Prompts for a file name (without any file prefix), takes an svg with that file name and exports the file as a latex compatible pdf file"
      (interactive "MEnter svg file name: ")
      (setq export (concat "inkscape -D --export-latex --export-pdf=" file_name ".pdf" file_name ".svg" ))
      (shell-command export))

    (defun insert-svg (NAME)
      "Prompts for an svg's name (without the prefix) and inserts an
      working orglink to the svg if it is located under a directory with
      the name of the buffer suffixed by -org-img.

    This is really useful for me as by default the function
    `org-inkscape-img' I use extensively saves inkscape's svgs in that
    directory. The problem is that that command was made with the latex
    export in mind (which is perfectly fine as I use it a lot) but in my
    org_roam setup I dont export files to latex so I just want to see the
    svg.

    For this reason, this command inserts an org link to an svg in that
    directory with the prompted file name and toggles image-preview to see
    it."
      (interactive "Msvg name: ")
      (insert (concat "[[" (file-name-sans-extension buffer-file-name) "-org-img/" NAME ".svg" "]]"))
      (org-toggle-inline-images))
  #+END_SRC


* Company
  Company is a minor mode, which I enable globally, which allows for autocompletions. This is useful when programming, or writing latex for completing what you want, but also can speed up the writing of long words. The lambda I add to the company-mode-hook adds latex autocompletions and allows them to be used anywhere. It also sets up company to read and give autocompletions for citations from my master .bib file in Zotero. I usually enter them with the ivy-bibtex package (my current default action is add citation there) but this is worth a try. 
  
  #+BEGIN_SRC elisp :tangle init.el
    
    (add-hook 'after-init-hook 'global-company-mode)
    (add-hook 'company-mode-hook '(lambda ()
				    (add-to-list 'company-backends 'company-math-symbols-latex)
				    (setq company-math-allow-latex-symbols-in-faces t)
				    (add-to-list 'company-backends 'company-bibtex)
				    (add-to-list 'company-backends 'company-capf)
				    (setq company-bibtex-bibliography '("~/org_roam/Zotero_library.bib"))))
    
  #+END_SRC
  
 
* Elfeed - RSS Feeds
Elfeed is an RSS reader for Emacs. I have started looking into it and adding things to my feed.

#+BEGIN_SRC elisp :results silent :tangle init.el
  
  (setq elfeed-feeds
	'(("https://feeds.feedburner.com/chemengntua" university)
	  ("https://www.reddit.com/r/emacs.rss" emacs linux reddit)
	  ("https://www.reddit.com/r/LaTeX.rss" emacs org reddit)
	  ("https://www.reddit.com/r/commandline.rss" linux reddit)
	  ("https://www.reddit.com/r/vim.rss" linux reddit)
	  ("https://www.reddit.com/r/linux.rss" linux reddit)
	  ("https://www.reddit.com/r/orgmode.rss" emacs org reddit)
	  ("https://www.reddit.com/r/git.rss" linux reddit)
	  ("https://www.reddit.com/r/OrgRoam.rss" emacs org zettelkasten reddit)
	  ("https://www.reddit.com/r/planetemacs.rss" emacs reddit)
	  ("https://www.youtube.com/feeds/videos.xml?channel_id=UCQp2VLAOlvq142YN3JO3y8w" emacs org python youtube) ; John Kitchin's YT
	  ("https://www.youtube.com/feeds/videos.xml?channel_id=UCVls1GmFKf6WlTraIb_IaJg" linux youtube) ; DistroTube's YT
	  ("https://www.youtube.com/feeds/videos.xml?channel_id=UCld68syR8Wi-GY_n4CaoJGA" linux youtube) ; Brodie Robertson's YT
	  ("https://www.youtube.com/feeds/videos.xml?channel_id=UCAiiOTio8Yu69c3XnR7nQBQ" emacs org youtube) ; SystemCrafters YT
	  ("https://www.youtube.com/feeds/videos.xml?channel_id=UC0uTPqBCFIpZxlz_Lv1tk_g" emacs youtube) ; Protesilaos Stavrou's YT
	  ("https://org-roam.discourse.group/c/how-to/6.rss" emacs org zettelkasten)
	  ("https://org-roam.discourse.group/c/dev/5.rss" emacs org zettelkasten)
	  ("https://org-roam.discourse.group/c/meta/11.rss" emacs org zettelkasten)
	  ("https://planet.emacslife.com/atom.xml" emacs)
	  ("https://irreal.org/blog/?feed=rss2" emacs linux org)
	  ("https://sachachua.com/blog/category/emacs-news/feed/" emacs)
	  ))
  
#+END_SRC


* Scimax
  Scimax is an emacs configuration framework made by John Kitchin which is said to be an emacs starterkit for scientists and engineers. I really like some parts of scimax, and as every part of it is a seperate elisp library I can simply require the libraries I like and use them to my liking. This is what this section is for.
  
** Exporting
   Some exporting libraries provided by scimax which are useful

#+BEGIN_SRC elisp :tangle init.el
  
  (require 'ox-word)
  (require 'org-show)
  
#+END_SRC

** COMMENT Python
   Improvements to jupyter interaction with emacs.

#+BEGIN_SRC elisp :tangle init.el
  
  (require 'scimax-jupyter)
  
#+END_SRC

** Abbreviations & Spellchecking
   I just import the entire autoformat library and enable two minor modes from it
#+BEGIN_SRC elisp :tangle init.el
  
  (require 'scimax-autoformat-abbrev)
  (add-hook 'org-mode-hook '(lambda ()
			      scimax-abbrev-mode
			      scimax-autoformat-mode))
  
#+END_SRC


** Elfeed
   I want a more personalised elfeed config rather than what scimax uses, but there are some functions in the scimax elfeed config such as the one that grabs the doi of an article in your rss feed and adds it to a your .bib file using doi-utils and org-ref. That will be useful once I start using rss more so I would like to add them to my config

#+BEGIN_SRC elisp :tangle init.el
  
  (defun doi-utils-add-entry-from-elfeed-entry ()
    "Add elfeed entry to bibtex."
    (interactive)
    (require 'org-ref)
    (let* ((title (elfeed-entry-title elfeed-show-entry))
	   (url (elfeed-entry-link elfeed-show-entry))
	   (content (elfeed-deref (elfeed-entry-content elfeed-show-entry)))
	   (entry-id (elfeed-entry-id elfeed-show-entry))
	   (entry-link (elfeed-entry-link elfeed-show-entry))
	   (entry-id-str (concat (car entry-id)
				 "|"
				 (cdr entry-id)
				 "|"
				 url)))
      (if (string-match "DOI: \\(.*\\)$" content)
	  (doi-add-bibtex-entry (match-string 1 content)
				(ido-completing-read
				 "Bibfile: "
				 (append (f-entries "." (lambda (f)
							  (and (not (string-match "#" f))
							       (f-ext? f "bib"))))
					 org-ref-default-bibliography)))
	(let ((dois (org-ref-url-scrape-dois url)))
	  (cond
	   ;; One doi found. Assume it is what we want.
	   ((= 1 (length dois))
	    (doi-utils-add-bibtex-entry-from-doi
	     (car dois)
	     (ido-completing-read
	      "Bibfile: "
	      (append (f-entries "." (lambda (f)
				       (and (not (string-match "#" f))
					    (f-ext? f "bib"))))
		      org-ref-default-bibliography)))
	    action)
	   ;; Multiple DOIs found
	   ((> (length dois) 1)
	    (ivy-read "Select a DOI" (let ((dois '()))
				       (with-current-buffer (url-retrieve-synchronously url)
					 (loop for doi-pattern in org-ref-doi-regexps
					       do
					       (goto-char (point-min))
					       (while (re-search-forward doi-pattern nil t)
						 (pushnew
						  ;; Cut off the doi, sometimes
						  ;; false matches are long.
						  (cons (format "%40s | %s"
								(substring
								 (match-string 1)
								 0 (min
								    (length (match-string 1))
								    40))
								doi-pattern)
							(match-string 1))
						  dois
						  :test #'equal)))
					 (reverse dois)))
		      :action
		      (lambda (x)
			(let ((bibfile (completing-read
					"Bibfile: "
					(append (f-entries "." (lambda (f)
								 (and (not (string-match "#" f))
								      (f-ext? f "bib"))))
						org-ref-default-bibliography))))
			  (doi-utils-add-bibtex-entry-from-doi
			   doi
			   bibfile)
			  ;; this removes two blank lines before each entry.
			  (bibtex-beginning-of-entry)
			  (delete-char -2))))
	    ;; (helm :sources
	    ;; 	`((name . "Select a DOI")
	    ;; 	  (candidates . ,(let ((dois '()))
	    ;; 			   (with-current-buffer (url-retrieve-synchronously url)
	    ;; 			     (loop for doi-pattern in org-ref-doi-regexps
	    ;; 				   do
	    ;; 				   (goto-char (point-min))
	    ;; 				   (while (re-search-forward doi-pattern nil t)
	    ;; 				     (pushnew
	    ;; 				      ;; Cut off the doi, sometimes
	    ;; 				      ;; false matches are long.
	    ;; 				      (cons (format "%40s | %s"
	    ;; 						    (substring
	    ;; 						     (match-string 1)
	    ;; 						     0 (min
	    ;; 							(length (match-string 1))
	    ;; 							40))
	    ;; 						    doi-pattern)
	    ;; 					    (match-string 1))
	    ;; 				      dois
	    ;; 				      :test #'equal)))
	    ;; 			     (reverse dois))))
	    ;; 	  (action . (lambda (candidates)
	    ;; 		      (let ((bibfile (ido-completing-read
	    ;; 				      "Bibfile: "
	    ;; 				      (append (f-entries "." (lambda (f)
	    ;; 							       (and (not (string-match "#" f))
	    ;; 								    (f-ext? f "bib"))))
	    ;; 					      org-ref-default-bibliography))))
	    ;; 			(loop for doi in (helm-marked-candidates)
	    ;; 			      do
	    ;; 			      (doi-utils-add-bibtex-entry-from-doi
	    ;; 			       doi
	    ;; 			       bibfile)
	    ;; 			      ;; this removes two blank lines before each entry.
	    ;; 			      (bibtex-beginning-of-entry)
	    ;; 			      (delete-char -2)))))))
	    ))))))
  
  (defun org-elfeed-store-link ()
    "Store a link to an elfeed entry."
    (interactive)
    (cond
     ((eq major-mode 'elfeed-show-mode)
      (let* ((title (elfeed-entry-title elfeed-show-entry))
	     (url (elfeed-entry-link elfeed-show-entry))
	     (entry-id (elfeed-entry-id elfeed-show-entry))
	     (entry-id-str (concat (car entry-id)
				   "|"
				   (cdr entry-id)
				   "|"
				   url))
	     (org-link (concat "elfeed:entry-id:" entry-id-str)))
	(org-link-store-props
	 :description title
	 :type "elfeed"
	 :link org-link
	 :url url
	 :entry-id entry-id)
	org-link))
     (t nil)))
#+END_SRC


* Ebib
Ebib is an emacs bibliography manager program. My customisations for it live here

#+BEGIN_SRC elisp :tangle init.el
  (setq ebib-preload-bib-files '("~/Sync/My_Library.bib"))
  
  (add-hook 'ebib-entry-mode-hook 'visual-line-mode)
  
  (setq ebib-index-columns '(("Title" 60 t)
			     ("Author/Editor" 40 t)
			     ("Year" 6 t)
			     ("Entry Key" 40 t)
			     ("Note" 10 t)))
  
  (setq ebib-notes-directory "~/org_roam/ref")
#+END_SRC


* Other Major Modes
Some other extensions inside my Emacs config that require some changes for their major modes to function as I want them. 

** Python 
   Python-mls is a small utility package to allow the python repl for emacs to have multi line commands

#+BEGIN_SRC elisp :tangle init.el
(use-package python-mls
  :config
  (python-mls-setup))
#+END_SRC
** Calc
   The M-x calc is a powerful calculator software built for Emacs. I set up some small utilities for it like making angles counted in radians and keeping symbols like sqrt(2) as sqrt(2) and not substituting it for a number. 

#+BEGIN_SRC elisp :tangle init.el
  
  (setq calc-angle-mode 'rad)
;	calc-symbolic-mode t)
  
#+END_SRC


** Ebuku
  Ebuku is the Emacs major mode for buku, a simple terminal bookmark manager. Since I store all my bookmarks there, this gives me a way to launch my favourite pages from inside Emacs, which is a utility I deem very useful. For some reason, evil-collections keybindings didn't work by default so I enabled them manually (this is the first package I have had this happen to me with)

  #+BEGIN_SRC elisp :tangle init.el
    (require 'ebuku)
    (require 'evil-collection-ebuku)

    (add-hook 'ebuku-mode-hook 'evil-collection-ebuku-setup)
  #+END_SRC
  
** PDF Tools

Configuration for PDF-tools, my favourite Emacs pdf viewer. I set it as the default pdf viewer for Emacs and enable the midnight minor mode for it as it makes it match my dark theme which is cool.

#+BEGIN_SRC elisp :tangle init.el

    (use-package pdf-tools
      :mode (("\\.pdf\\'" . pdf-view-mode))
      :config
      ;(define-key pdf-view-mode-map [remap quit-window] #'kill-current-buffer)
      (progn
	(pdf-tools-install))
      )

  (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
#+END_SRC

** Periodic Table in emacs
   Eperiodic is a small emacs library for viewing a periodic table inside emacs. Its actually pretty detailed and has more info than just a periodic table and I really like it. I just require the package here as I found it in emacs wiki (https://www.emacswiki.org/emacs/eperiodic.el) and not on Melpa. 

#+BEGIN_SRC elisp :tangle init.el

  (require 'eperiodic)

#+END_SRC

** Emacs Application Framework
  
     EAF is a very promising package for Emacs giving it some useful gui apps that are not so easy to find in other packages (such as a browser) and in general a full suite of applications. Unfortunately its got a weird behaviour in tiling window managers such as i3 and qtile, which I use not allowing me to use Emacs commands inside its buffers. It seems that when the cursor is outside the Emacs buffer (in my bar) this fixes but its still annoying so its use is limited unfortunately.

   #+BEGIN_SRC elisp :tangle init.el
     (require 'eaf)

     (require 'eaf-evil)

     (setq eaf-wm-focus-fix-wms '("qtile"))

   #+END_SRC
  
** Elisp
   Elisp is the internal language of Emacs. I enable eldoc-mode in Elisp and ielm which is just awesome for writing elisp. 
   
   #+BEGIN_SRC elisp :tangle init.el
     
     (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
     (add-hook 'ielm-mode-hook 'eldoc-mode)
     
   #+END_SRC

** Deft
   Deft is a package which provides a nice interface for browsing your network of notes in org-roam.

   #+BEGIN_SRC elisp :tangle init.el
     
     (setq deft-extensions '("org"))
     (setq deft-directory "~/org_roam")
     (setq deft-recursive t)
     
   #+END_SRC


* Custom Variables
These are some variables automatically generated by the "M-x customize" menu. Its better not to play around with this section of the config file as to not mess something up accidentally. I honestly almost never set something with the customize menu because I prefer writing it manually in my config. Gives me a sense of order really. 

#+BEGIN_SRC elisp :tangle init.el
;; CUSTOM VARIABLES
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes
   '("0fffa9669425ff140ff2ae8568c7719705ef33b7a927a0ba7c5e2ffcfac09b75" default))
 '(package-selected-packages
   '(evil-collection openwith sequences cl-lib-highlight helm-system-packages async-await popup-complete helm-fuzzy-find evil-space yapfify yaml-mode ws-butler winum which-key web-mode web-beautify vterm volatile-highlights vi-tilde-fringe uuidgen use-package toc-org tagedit spaceline solarized-theme slim-mode scss-mode sass-mode restart-emacs request rainbow-delimiters pyvenv pytest pyenv-mode py-isort pug-mode pspp-mode popwin pip-requirements persp-mode pcre2el paradox org-projectile-helm org-present org-pomodoro org-mime org-download org-bullets open-junk-file neotree move-text mmm-mode markdown-toc magit macrostep lorem-ipsum livid-mode live-py-mode linum-relative link-hint json-mode js2-refactor js-doc intero indent-guide hy-mode hungry-delete htmlize hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation helm-themes helm-swoop helm-pydoc helm-projectile helm-mode-manager helm-make helm-hoogle helm-flx helm-descbinds helm-css-scss helm-ag haskell-snippets gruvbox-theme google-translate golden-ratio gnuplot gh-md flx-ido fill-column-indicator fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-args evil-anzu eval-sexp-fu emmet-mode elisp-slime-nav dumb-jump diminish define-word cython-mode csv-mode company-ghci company-ghc column-enforce-mode coffee-mode cmm-mode clean-aindent-mode auto-highlight-symbol auto-compile auctex-latexmk anaconda-mode aggressive-indent adaptive-wrap ace-window ace-link ace-jump-helm-line)))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

#+END_SRC



